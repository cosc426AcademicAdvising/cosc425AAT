Index: View.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom tkinter import ttk\r\n# import tkinter as tk\r\n# from ttkthemes import ThemedTk\r\nfrom pubsub import pub  # pip install PyPubSub\r\nimport tkinter.font as TkFont\r\n# from PIL import ImageTk, Image  # pip install pillow\r\nfrom tkinter import messagebox\r\n\r\n\r\nclass View:\r\n    def __init__(self, master, schL, subjectL):\r\n        self.mainwin = master\r\n        self.mainwin.title(\"Academic Advising Tool\")\r\n        self.mainwin.geometry(\"{0}x{1}+0+0\".format(master.winfo_screenwidth(), master.winfo_screenheight()))\r\n\r\n        # self.mainwin.resizable(width=0, height=0)\r\n        # 2560 x 1440\r\n        self.mainwin.deiconify()\r\n\r\n        # self.mainwin.call('tk', 'scaling', 0.75)\r\n\r\n        self.defaultFont = TkFont.nametofont(\"TkDefaultFont\")\r\n        self.defaultFont.configure(family='Helvetica', size=14)\r\n\r\n        self.TVstyle = ttk.Style()\r\n        self.TVstyle.configure(\"mystyle.Treeview\", font=('Helvetica', 12))\r\n        self.TVstyle.configure(\"mystyle.Treeview.Heading\", font=('Helvetica', 12))\r\n\r\n        self.schList = schL\r\n        self.subjectsList = subjectL\r\n\r\n        self.courseTree_counter = 0\r\n        self.backupCourseTree_counter = 0\r\n        self.courseTakenList_counter = 0\r\n        self.addCourseSearchResult = []\r\n        self.resultVar = StringVar()  # for add course button\r\n\r\n        self.courseHist = []\r\n\r\n        self.layout()\r\n        self.menuBar()\r\n\r\n    def layout(self):\r\n        self.right_width = self.mainwin.winfo_screenwidth() * 0.4\r\n        self.left_width = self.mainwin.winfo_screenwidth() - self.right_width\r\n\r\n        # four year plan\r\n        self.leftFrame = Frame(self.mainwin, highlightbackground='gray', highlightthickness=2, width=self.left_width)\r\n        self.leftFrame.pack(side=LEFT, fill=Y)\r\n\r\n        # program planning worksheet\r\n        self.PPWFrame = Frame(self.mainwin, highlightbackground='gray', highlightthickness=2, width=self.right_width)\r\n        self.PPWFrame.pack(side=RIGHT, fill=Y)\r\n        self.PPWFrame.pack_propagate(0)\r\n\r\n        self.courseTakenListFrame = Frame(self.mainwin, highlightbackground='gray', highlightthickness=2,\r\n                                          width=self.left_width)\r\n        self.courseTakenListFrame.pack(side=LEFT, fill=Y)\r\n        self.courseTakenListFrame.pack_propagate(0)\r\n        self.courseTakenListFrame.pack_forget()  # hide frame\r\n\r\n        self.FourYearPlan()\r\n        self.planningWorksheet_layout()\r\n        self.courseTakenList_layout()\r\n\r\n    def FourYearPlan(self):\r\n        # ============================ Scroll Bar ============================\r\n        canvas = Canvas(self.leftFrame, width=self.left_width) # Creating Canvas for scrollbar\r\n        canvas.pack(side=LEFT, fill=BOTH, expand=1)\r\n\r\n        scrollbar = ttk.Scrollbar(self.leftFrame, orient=VERTICAL, command=canvas.yview)\r\n        scrollbar.pack(side=RIGHT, fill=Y)\r\n\r\n        canvas.configure(yscrollcommand=scrollbar.set)\r\n        canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\")))\r\n\r\n        self.innerLeftFrame = Frame(canvas)\r\n        self.innerLeftFrame.pack(expand=1)\r\n        canvas.create_window((0, 0), window=self.innerLeftFrame, anchor=NW, width=self.left_width)\r\n\r\n        # ============================ title ============================\r\n        ProgPlanTitleFrame = Frame(self.innerLeftFrame, width=self.left_width, height=50)\r\n        ProgPlanTitleFrame.pack(pady=20)\r\n\r\n        ProgPlanTitle = ttk.Label(ProgPlanTitleFrame, text=\"Academic Advising\", anchor=CENTER,\r\n                                  font=('Helvetica', 19))\r\n        ProgPlanTitle.pack(side=TOP)\r\n\r\n        # ============================ Student Name and ID ============================\r\n\r\n        nameIDFrame = Frame(self.innerLeftFrame, width=self.left_width, height=50)\r\n        nameIDFrame.pack(ipadx=30, ipady=10)\r\n\r\n        nameLabel = Label(nameIDFrame, text='Name:')\r\n        nameLabel.pack(side=LEFT, expand=1)\r\n\r\n        self.name2Entry = ttk.Entry(nameIDFrame)\r\n        self.name2Entry.pack(side=LEFT, expand=1)\r\n\r\n        self.id2Entry = ttk.Entry(nameIDFrame, width=8)\r\n        self.id2Entry.pack(side=RIGHT, expand=1)\r\n\r\n        idLabel = Label(nameIDFrame, text='ID Number:')\r\n        idLabel.pack(side=RIGHT, expand=1)\r\n\r\n        # ============================ Policy Memo ============================\r\n        policyFrame = ttk.LabelFrame(self.innerLeftFrame, height=200, width=self.left_width, text='University Policy:')\r\n        policyFrame.pack(pady=30)\r\n\r\n        self.policyMemoEntry = Text(policyFrame, width=90, height=10)\r\n        self.policyMemoEntry.pack()\r\n\r\n        # ============================ Progress Report ============================\r\n        # Creation of ttk.Notebook to add tabs to Academic Advising screen\r\n        self.tab_parent = ttk.Notebook(self.innerLeftFrame)\r\n\r\n        # Frame for Progress Report tab\r\n        self.progressRepoFrame = Frame(self.tab_parent, width=self.left_width)\r\n        self.progressRepoFrame.pack(fill='both')\r\n\r\n        # Event handler to change policy via clicking a tab\r\n        self.tab_parent.bind('<ButtonRelease>', self.updatePolicy)\r\n        self.tab_parent.pack(expand=1, fill=X, pady=30, ipady=5)\r\n\r\n        self.progLabel = []  # Holds the labels for each semester in Progress Report\r\n        self.progTable = []  # Holds the treeviews for progress report\r\n\r\n        # Treeviews are created for Progress Report tab\r\n        self.createTable(self.progressRepoFrame, self.progLabel, self.progTable, 0)\r\n        # Adds the progress report tab ttk.Notebook\r\n        self.tab_parent.add(self.progressRepoFrame, text=\"Progress Report\")\r\n\r\n        # Creating buttons for Progress Report placing with .grid() in FYP_addCourseButton\r\n        self.addProgRepoBtn = Button(self.progressRepoFrame, text=\"Add\", command=self.FYP_addCourseButton)\r\n        self.removeProgRepoBtn = Button(self.progressRepoFrame, text=\"Remove\", command=self.FYP_delCourseButton)\r\n\r\n        # ============================ Add Semester Table Button ============================\r\n        \"\"\"\"\r\n        self.addSemesterBtn = Button(self.semesterFrame, text=\"Add a semester\")\r\n        self.addSemesterBtn.pack()\r\n        self.addSemesterBtn.place(x=120, y=950)\r\n        self.temp = semesterCounter\r\n        self.tempY = yPos\r\n        self.addSemesterBtn['command'] = lambda: self.createSemesterBtn(\"Extra Semester\", self.tempY, self.semTable,\r\n                                                                        self.semLabel, self.semesterFrame, self.temp)\r\n        \"\"\"\r\n\r\n    def fourYearPlan_fill(self, obj, tcred, courses, numbCourse, major, minor, bcourses,\r\n                          courseHist, fourYear, minorFourYear, minorReqList, policies):\r\n        # delete what was previously there then insert\r\n        self.name2Entry.delete(0, END)\r\n        self.name2Entry.insert(END, obj['name'])\r\n\r\n        self.id2Entry.delete(0, END)\r\n        self.id2Entry.insert(END, obj['s_id'])\r\n\r\n        self.minorReqList = minorReqList  # Copying minor requirements to use as labels for creatTable() (COULD MAKE THIS ENCAPSULATED)\r\n        self.policies = policies  # Copying policies for other functions (COULD MAKE THIS ENCAPSULATED)\r\n        self.majorsTable = []  # Holds arrays filled with treeviews\r\n        self.minorsTable = []  # Holds arrays filled with treeviews\r\n        self.majorFrames = []  # Holds frames major for tabs\r\n        self.minorFrames = []  # Holds frames minor for tabs\r\n        self.majorsLabelArray = []  # Holds labels for major tabs\r\n        self.minorsLabelArray = []  # Holds labels for minor tabs\r\n\r\n\r\n\r\n        self.progTableTree_iid = 0  # Tracks iid for Progress Report treeviews\r\n        self.majorsTableTree_iid = 0  # Tracks iid for major tables treeviews\r\n\r\n        semIndex = 0\r\n        for sem in courseHist:  # Filling the Progress Report treeviews with students course history from database\r\n            self.progTableTree_iid = 0\r\n            for course in sem:\r\n                self.progTable[semIndex].insert(parent='', index='end', iid=self.progTableTree_iid,\r\n                                                values=(course[1] + \" \" + course[2], course[3], course[4]))\r\n                self.progTableTree_iid += 1\r\n            semIndex += 1\r\n\r\n        for i in range(len(major)): # Filling arrays according to amount of majors a student is doing\r\n            self.majorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\r\n            self.majorsTable.append([])  # Creates 2d array each array is a major containing each treeview for a tab\r\n            self.majorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\r\n            self.createTable(self.majorFrames[i], self.majorsLabelArray[i], self.majorsTable[i], 0) # Function to populate these arrays\r\n            self.tab_parent.add(self.majorFrames[i], text=major[i]) # Each frame to the ttk.Notebook to display tab\r\n\r\n        for i in range(len(minor)): # Filling arrays according to amount of majors a student is doing\r\n            self.minorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\r\n            self.minorsTable.append([])  # Creates 2d array each array is a minor containing each treeview for a tab\r\n            self.minorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\r\n            self.createTable(self.minorFrames[i], self.minorsLabelArray[i], self.minorsTable[i], 1) # Function to populate these arrays\r\n            self.tab_parent.add(self.minorFrames[i], text=minor[i]) # Each frame to the ttk.Notebook to display tab\r\n\r\n        majorIndex = 0\r\n        for majors in fourYear: # Filling semesters for each major\r\n            semIndex = 0\r\n            for sem in majors:\r\n                self.majorsTableTree_iid = 0\r\n                for course in sem:\r\n                    self.majorsTable[majorIndex][semIndex].insert(parent='', index='end',\r\n                                                                  iid=self.majorsTableTree_iid,\r\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\r\n                                                                          course[4]))\r\n                    self.majorsTableTree_iid += 1\r\n                semIndex += 1\r\n            majorIndex += 1\r\n\r\n        minorIndex = 0\r\n        for minors in minorFourYear:  # Filling semesters for each minor\r\n            semIndex = 0\r\n            for sem in minors:\r\n                self.minorTableTree_iid = 0\r\n                for course in sem:\r\n                    self.minorsTable[minorIndex][semIndex].insert(parent='', index='end',\r\n                                                                  iid=self.minorTableTree_iid,\r\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\r\n                                                                          course[4]))\r\n                    self.minorTableTree_iid += 1\r\n                semIndex += 1\r\n            minorIndex += 1\r\n\r\n    def FYP_reset(self):\r\n        self.name2Entry.delete(0, END)\r\n        self.id2Entry.delete(0, END)\r\n\r\n        self.policyMemoEntry.delete('1.0', 'end')\r\n\r\n        for sem in self.progTable: # Clear treeviews in Progress Report\r\n            for course in sem.get_children():\r\n                sem.delete(course)\r\n\r\n        for majors in self.majorsTable: # Clear treeviews for each major tab\r\n            for sem in majors:\r\n                for course in sem.get_children():\r\n                    sem.delete(course)\r\n        for minors in self.minorsTable: # Clear treeviews for each minor tab\r\n            for sem in minors:\r\n                for course in sem.get_children():\r\n                    sem.delete(course)\r\n        self.majorsTable.clear()\r\n        self.minorsTable.clear()\r\n        self.majorsLabelArray.clear()\r\n        self.minorsLabelArray.clear()\r\n        self.majorFrames.clear()\r\n        self.minorFrames.clear()\r\n\r\n        while (self.tab_parent.index(\"end\") != 1): # Removes the tabs but leaves Progress Report tab\r\n            self.tab_parent.forget(self.tab_parent.index(\"end\") - 1)\r\n\r\n    def FYP_addCourseButton(self):\r\n        t = Toplevel(self.mainwin)\r\n        t.wm_title(\"Search for Course\")\r\n        t.geometry(\"450x125\")\r\n        t.resizable(width=FALSE, height=FALSE)\r\n        # t.attributes('-topmost', 'true')\r\n        t.transient(self.mainwin)\r\n        selectedTreeView = self.progressRepoFrame.focus_get()\r\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\r\n\r\n        def courseSearch(e):\r\n            course = entry.get()\r\n            if len(course) > 7:\r\n                if len(course.split()[1]) == 3:\r\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\r\n                    self.resultVar.set(\r\n                        self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\r\n                        self.addCourseSearchResult[2] + \" \" * 3 +\r\n                        self.addCourseSearchResult[3])\r\n                else:\r\n                    self.resultVar.set(\"\")\r\n            else:\r\n                self.resultVar.set(\"\")\r\n\r\n        # adds searched course into the treeview\r\n        def addCourse():\r\n            selectedTreeView.insert(parent='', index='end', iid=(len(selectedTreeView.get_children())+1), text=\"\",\r\n                                    values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\r\n                                            self.addCourseSearchResult[2]))\r\n\r\n        courseEntryFrame = Frame(t)\r\n        courseEntryFrame.pack(anchor=CENTER)\r\n\r\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\r\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\r\n        entry.pack(side=RIGHT)\r\n\r\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\r\n\r\n        resultFrame = Frame(t)\r\n        resultFrame.pack(anchor=CENTER)\r\n\r\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\r\n        resultEntry.pack(pady=10)\r\n\r\n        addButton = Button(resultFrame, text=\"Add\", command=addCourse)\r\n        addButton.pack(side=BOTTOM, pady=5)\r\n\r\n    def FYP_delCourseButton(self):\r\n        selectedTreeView = self.progressRepoFrame.focus_get()\r\n        for course in selectedTreeView.selection():\r\n            msg = \"Do you want to remove the selected course? (\" + selectedTreeView.item(course)['values'][0] + \")\"\r\n            response = messagebox.askquestion(\"askquestion\", msg)\r\n            if response == 'yes':\r\n                selectedTreeView.delete(course)\r\n\r\n    # Function for event handler to change policy memo via clicking a tab\r\n    def updatePolicy(self, event):\r\n        selected_tab = event.widget.select()\r\n        tab_text = event.widget.tab(selected_tab, \"text\")\r\n        tab_index = event.widget.index(selected_tab)\r\n        if tab_text == \"Progress Report\":\r\n            pass\r\n        else:\r\n            self.policyMemoEntry.delete('1.0', 'end')\r\n            self.policyMemoEntry.insert('1.0', self.policies[tab_index - 1])\r\n\r\n    # Creates a table of treeviews for tabs in Academic Advising\r\n    def createTable(self, frame, labels, tables, hasMinor):\r\n        # column configure\r\n        for i in range(2):\r\n            frame.columnconfigure(i, weight=1)\r\n\r\n        # define treeviews and labels\r\n        for i in range(8):\r\n            tables.append(ttk.Treeview(frame, height=7, style=\"mystyle.Treeview\", takefocus=True))\r\n\r\n            tables[i]['columns'] = (\"course#\", \"title\", \"cred\")\r\n            tables[i].column(\"#0\", width=0, stretch=NO)\r\n            tables[i].column(\"course#\", anchor=CENTER, width=75)\r\n            w = int((self.left_width - 300) / 2)\r\n            tables[i].column(\"title\", anchor=W, width=w)\r\n            tables[i].column(\"cred\", anchor=CENTER, width=25)\r\n            # tables[i].column(\"taken\", anchor=CENTER, width=30)\r\n\r\n            tables[i].heading(\"course#\", text='Course #', anchor=CENTER)\r\n            tables[i].heading(\"title\", text='Title', anchor=CENTER)\r\n            tables[i].heading(\"cred\", text='CR', anchor=CENTER)\r\n            if hasMinor == 0:\r\n                if i < 8 / 2:\r\n                    labels.append(Label(frame, text=\"Year \" + str(i + 1), font=('Helvetica', 15)))\r\n            else:\r\n                labels.append(Label(frame, text=self.minorReqList[0], font=('Helvetica', 15)))\r\n\r\n\r\n        # grid labels\r\n        for i in range(4):\r\n            labels[i].grid(column=0, row=2 * i, columnspan=2, sticky=W, padx=5)\r\n\r\n        # grid treeviews\r\n        for i in range(0, 8 - 1, 2):\r\n            tables[i].grid(column=0, row=i + 1)\r\n            tables[i + 1].grid(column=1, row=i + 1)\r\n\r\n    def planningWorksheet_layout(self):\r\n        self.rightFrame = Frame(self.PPWFrame)\r\n        self.rightFrame.pack(fill=BOTH)\r\n\r\n        for i in range(4):\r\n            self.rightFrame.columnconfigure(i, weight=1)\r\n\r\n        pad = 10  # pady value for most frames below\r\n\r\n        # ============================ title ============================\r\n        ProgPlanTitle = ttk.Label(self.rightFrame, text=\"Program Planning Worksheet\", anchor=CENTER,\r\n                                  font=('Helvetica', 19))\r\n        ProgPlanTitle.grid(row=0, column=0, columnspan=4, pady=20)\r\n\r\n        # ============================ student name ============================\r\n        nameFrame = Frame(self.rightFrame)\r\n        nameFrame.grid(row=2, column=0, columnspan=2, pady=pad)\r\n\r\n        nameLabel = Label(nameFrame, text='Name:')\r\n        nameLabel.pack(side=LEFT)\r\n\r\n        self.nameEntry = ttk.Entry(nameFrame)\r\n        self.nameEntry.pack()\r\n\r\n        # ============================ student id ============================\r\n        idFrame = Frame(self.rightFrame)\r\n        idFrame.grid(row=2, column=2, columnspan=2, pady=pad)\r\n\r\n        idLabel = Label(idFrame, text='ID Number:')\r\n        idLabel.pack(side=LEFT)\r\n\r\n        self.idEntry = ttk.Entry(idFrame, width=8, justify=CENTER)\r\n        self.idEntry.pack()\r\n\r\n        # ============================ season ============================\r\n        seasonFrame = Frame(self.rightFrame)\r\n        seasonFrame.grid(row=4, column=0, columnspan=4, pady=pad)\r\n\r\n        self.seasonVar = StringVar()\r\n\r\n        seasonLabel = Label(seasonFrame, text='Registering for:')\r\n        fallRadioBtn = ttk.Radiobutton(seasonFrame, text='Fall', variable=self.seasonVar, value='Fall')\r\n        summerRadioBtn = ttk.Radiobutton(seasonFrame, text='Summer', variable=self.seasonVar, value='Summer')\r\n        springRadioBtn = ttk.Radiobutton(seasonFrame, text='Spring', variable=self.seasonVar, value='Spring')\r\n        winterRadioBtn = ttk.Radiobutton(seasonFrame, text='Winter', variable=self.seasonVar, value='Winter')\r\n\r\n        seasonLabel.grid(row=0, column=0, padx=10)\r\n        fallRadioBtn.grid(row=0, column=1, padx=10)\r\n        winterRadioBtn.grid(row=0, column=2, padx=10)\r\n        springRadioBtn.grid(row=0, column=3, padx=10)\r\n        summerRadioBtn.grid(row=0, column=4)\r\n\r\n        # ============================ major & minor ============================\r\n        careerFrame = Frame(self.rightFrame)\r\n        careerFrame.grid(row=6, column=0, columnspan=4, pady=pad)\r\n\r\n        self.majorTree = ttk.Treeview(careerFrame, height=3, style=\"mystyle.Treeview\", selectmode='none')\r\n        self.majorTree.pack(side=LEFT, padx=30)\r\n        self.majorTree.column(\"#0\", width=150)\r\n        self.majorTree.heading(\"#0\", text=\"Majors\")\r\n\r\n        self.editCareerButton = ttk.Button(careerFrame, text=\"Edit\", command=self.editMajorMinor)\r\n        self.editCareerButton.pack(side=LEFT)\r\n\r\n        self.minorTree = ttk.Treeview(careerFrame, height=3, style=\"mystyle.Treeview\", selectmode='none')\r\n        self.minorTree.pack(side=RIGHT, padx=30)\r\n        self.minorTree.column(\"#0\", width=150)\r\n        self.minorTree.heading(\"#0\", text=\"Minors\")\r\n\r\n        # ============================ credits ============================\r\n        credFrame = Frame(self.rightFrame)\r\n        credFrame.grid(row=8, column=0, columnspan=4, pady=pad)\r\n\r\n        credFrameL = Frame(credFrame)\r\n        credFrameL.pack(side=LEFT, padx=15)\r\n\r\n        credFrameR = Frame(credFrame)\r\n        credFrameR.pack(side=RIGHT, padx=15)\r\n\r\n        credLabel1 = Label(credFrameL, text='Earned:')\r\n        self.earnCredEntry = ttk.Entry(credFrameL, width=3, justify=CENTER, state=DISABLED)\r\n        credLabel2 = Label(credFrameL, text='credits.')\r\n\r\n        credLabel1.grid(row=0, column=0)\r\n        self.earnCredEntry.grid(row=0, column=1)\r\n        credLabel2.grid(row=0, column=2)\r\n\r\n        credLabel3 = Label(credFrameR, text='Currently Enrolled in.')\r\n        self.enrollCredVar = IntVar()\r\n        self.enrollCredEntry = ttk.Entry(credFrameR, width=3, textvariable=self.enrollCredVar, justify=CENTER)\r\n        credLabel4 = Label(credFrameR, text='Credits')\r\n\r\n        credLabel4.grid(row=0, column=0)\r\n        self.enrollCredEntry.grid(row=0, column=1)\r\n        credLabel3.grid(row=0, column=2)\r\n\r\n        # ====================== Enrollment Date ========================\r\n        enrlDateFrame = ttk.Frame(self.rightFrame)\r\n        enrlDateFrame.grid(row=10, column=0, columnspan=4, pady=pad)\r\n\r\n        enrlDate = Label(enrlDateFrame, text='Enrollment Date:')\r\n        enrlDate.pack(side=LEFT)\r\n\r\n        self.enrlDateEntry = ttk.Entry(enrlDateFrame, width=8, justify=CENTER)\r\n        self.enrlDateEntry.pack()\r\n\r\n        # ============================ Course table ============================\r\n        courseTableFrame = Frame(self.rightFrame)\r\n        courseTableFrame.grid(row=12, column=0, columnspan=4, pady=pad)\r\n\r\n        self.courseTree = ttk.Treeview(courseTableFrame, height=7, style=\"mystyle.Treeview\")\r\n        # height is number of rows\r\n        self.courseTree.pack()\r\n\r\n        self.courseTree['columns'] = (\"course#\", \"title\", \"cred\", \"gen/elect\")\r\n\r\n        self.courseTree.column(\"#0\", width=0, stretch=NO)  # important\r\n        self.courseTree.column(\"course#\", anchor=CENTER, width=80)  # anchor for the data in the column\r\n        self.courseTree.column(\"title\", anchor=CENTER, width=295)\r\n        self.courseTree.column(\"cred\", anchor=CENTER, width=25)\r\n        self.courseTree.column(\"gen/elect\", anchor=CENTER, width=80)\r\n\r\n        self.courseTree.heading(\"course#\", text='Course #', anchor=CENTER)  # anchor for the title of the column\r\n        self.courseTree.heading(\"title\", text='Title', anchor=CENTER)\r\n        self.courseTree.heading(\"cred\", text='CR', anchor=CENTER)\r\n        self.courseTree.heading(\"gen/elect\", text='Gen ed/Elect', anchor=CENTER)\r\n\r\n        # ===================== backup course ===================\r\n        backupCourseFrame = Frame(self.rightFrame)\r\n        backupCourseFrame.grid(row=14, column=0, columnspan=4, pady=pad)\r\n\r\n        backuplabel = Label(backupCourseFrame, text=\"Back-up Courses\").pack(anchor=CENTER)\r\n\r\n        self.backupCourseTree = ttk.Treeview(backupCourseFrame, height=2, style=\"mystyle.Treeview\")\r\n        self.backupCourseTree.pack()\r\n\r\n        self.backupCourseTree['columns'] = (\"course#\", \"title\", \"cred\", \"gen/elect\")\r\n\r\n        self.backupCourseTree.column(\"#0\", width=0, stretch=NO)\r\n        self.backupCourseTree.column(\"course#\", anchor=CENTER, width=80)\r\n        self.backupCourseTree.column(\"title\", anchor=CENTER, width=295)\r\n        self.backupCourseTree.column(\"cred\", anchor=CENTER, width=25)\r\n        self.backupCourseTree.column(\"gen/elect\", anchor=CENTER, width=80)\r\n\r\n        self.backupCourseTree.heading(\"course#\", text='Course #', anchor=CENTER)  # anchor for the title of the column\r\n        self.backupCourseTree.heading(\"title\", text='Title', anchor=CENTER)\r\n        self.backupCourseTree.heading(\"cred\", text='CR', anchor=CENTER)\r\n        self.backupCourseTree.heading(\"gen/elect\", text='Gen ed/Elect', anchor=CENTER)\r\n\r\n        # ====================== memo ========================\r\n        memoFrame = ttk.LabelFrame(self.rightFrame, text='Memo:')\r\n        memoFrame.grid(row=16, column=0, columnspan=4, pady=pad)\r\n\r\n        self.memoEntry = Text(memoFrame, width=50, height=5)\r\n        self.memoEntry.pack()\r\n\r\n        # ===================== add remove course ==================\r\n        coursebuttonFrame = Frame(self.rightFrame)\r\n        coursebuttonFrame.grid(row=13, column=0, columnspan=4)\r\n\r\n        self.addCourseButton = ttk.Button(coursebuttonFrame, text=\"Add\", command=self.planningWorksheet_addCourseButton)\r\n        self.addCourseButton.pack(side=LEFT)\r\n\r\n        rmCourseButton = ttk.Button(coursebuttonFrame, text=\"Remove\", command=self.planningWorksheet_delCourseButton)\r\n        rmCourseButton.pack(side=RIGHT)\r\n\r\n        # backup course\r\n        bcoursebuttonFrame = Frame(self.rightFrame)\r\n        bcoursebuttonFrame.grid(row=15, column=0, columnspan=4)\r\n\r\n        self.addBackupButton = ttk.Button(bcoursebuttonFrame, text=\"Add\",\r\n                                          command=self.planningWorksheet_addBackupCourseButton)\r\n        self.addBackupButton.pack(side=LEFT)\r\n\r\n        rmBackupButton = ttk.Button(bcoursebuttonFrame, text=\"Remove\",\r\n                                    command=self.planningWorksheet_delBackupCourseButton)\r\n        rmBackupButton.pack(side=RIGHT)\r\n\r\n    # Popup window for editing student major and minor from program planning sheet\r\n    # called from button command\r\n    def editMajorMinor(self):\r\n        t = Toplevel(self.mainwin)\r\n        t.wm_title(\"Major & Minor\")\r\n        t.geometry(\"425x425\")\r\n        t.resizable(width=FALSE, height=FALSE)\r\n        t.transient(self.mainwin)\r\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\r\n\r\n        def close(e):\r\n            self.editCareerButton.configure(state=NORMAL)\r\n\r\n        t.bind('<Destroy>', close)\r\n        self.editCareerButton.configure(state=DISABLED)\r\n\r\n        # insert selected major into separate listbox\r\n        def majorSelection(e):\r\n            i = self.majorBox.curselection()\r\n            self.selected_major_Box.insert(END, self.majorBox.get(i))\r\n\r\n        def removeMajor():\r\n            i = self.selected_major_Box.curselection()\r\n            msg = \"Do you want to remove selected major? (\" + self.selected_major_Box.get(i) + \")\"\r\n            response = messagebox.askquestion(\"askquestion\", msg, parent=t)\r\n            if response == 'yes':\r\n                self.selected_major_Box.delete(i)\r\n\r\n        # insert selected minor into separate listbox\r\n        def minorSelection(e):\r\n            i = self.minorBox.curselection()\r\n            self.selected_minor_Box.insert(END, self.minorBox.get(i))\r\n\r\n        def removeMinor():\r\n            i = self.selected_minor_Box.curselection()\r\n            msg = \"Do you want to remove selected minor? (\" + self.selected_minor_Box.get(i) + \")\"\r\n            response = messagebox.askquestion(\"askquestion\", msg, parent=t)\r\n            if response == 'yes':\r\n                self.selected_minor_Box.delete(i)\r\n\r\n        def confirmSelection():\r\n            self.setMajor_treeview()\r\n            self.setMinor_treeview()\r\n            self.editCareerButton.configure(state=NORMAL)\r\n            t.destroy()\r\n\r\n        mainframe = Frame(t)\r\n        mainframe.pack(fill=X, ipadx=1, padx=10)\r\n\r\n        majorframe = ttk.LabelFrame(mainframe, text=\"Major\")\r\n        majorframe.pack(side=LEFT, pady=5)\r\n\r\n        minorframe = ttk.LabelFrame(mainframe, text=\"Minor\")\r\n        minorframe.pack(side=RIGHT, pady=5)\r\n\r\n        self.schCbox1 = ttk.Combobox(majorframe, value=self.schList, exportselection=0, width=18)\r\n        self.schCbox1.pack(side=TOP)\r\n        self.schCbox1.bind(\"<<ComboboxSelected>>\", self.getMajorBySchool)\r\n\r\n        self.schCbox2 = ttk.Combobox(minorframe, value=self.schList, exportselection=0, width=18)\r\n        self.schCbox2.pack(side=TOP)\r\n        self.schCbox2.bind(\"<<ComboboxSelected>>\", self.getMinorBySchool)\r\n\r\n        self.majorVar = StringVar()\r\n        self.majorBox = Listbox(majorframe, selectmode=SINGLE, justify=CENTER, listvariable=self.majorVar,\r\n                                exportselection=False)\r\n        # export selection allows us to work on other listbox while not calling this binding\r\n        self.majorBox.pack(side=TOP)\r\n        self.majorBox.bind('<Double-1>', majorSelection)  # double-click binding\r\n\r\n        self.minorVar = StringVar()\r\n        self.minorBox = Listbox(minorframe, selectmode=SINGLE, justify=CENTER, listvariable=self.minorVar,\r\n                                exportselection=False)\r\n        self.minorBox.pack(side=TOP)\r\n        self.minorBox.bind('<Double-1>', minorSelection)\r\n\r\n        label3 = Label(majorframe, text=\"Major(s) Selected:\")\r\n        label3.pack(side=TOP)\r\n        label4 = Label(minorframe, text=\"Minor(s) Selected:\")\r\n        label4.pack(side=TOP)\r\n\r\n        self.selected_major_Box = Listbox(majorframe, selectmode=SINGLE, justify=CENTER, exportselection=False,\r\n                                          height=5)\r\n        self.selected_major_Box.pack(side=TOP)\r\n\r\n        self.selected_minor_Box = Listbox(minorframe, selectmode=SINGLE, justify=CENTER, exportselection=False,\r\n                                          height=5)\r\n        self.selected_minor_Box.pack(side=TOP)\r\n\r\n        # for if major & minor treeview were already filled\r\n        for id in self.majorTree.get_children():\r\n            major = self.majorTree.item(id)['text']\r\n            self.selected_major_Box.insert(END, major)\r\n\r\n        for id in self.minorTree.get_children():\r\n            minor = self.minorTree.item(id)['text']\r\n            self.selected_minor_Box.insert(END, minor)\r\n\r\n        majorRemoveButton = ttk.Button(majorframe, text=\"Remove\", command=removeMajor)\r\n        majorRemoveButton.pack(side=TOP)\r\n        minorRemoveButton = ttk.Button(minorframe, text=\"Remove\", command=removeMinor)\r\n        minorRemoveButton.pack(side=TOP)\r\n\r\n        comfirmButton = ttk.Button(t, text=\"Confirm\", command=confirmSelection)  # TODO: link to four year plan\r\n        comfirmButton.pack(side=BOTTOM, pady=10)\r\n\r\n    # end goal: return array of major under specified school\r\n    def getMajorBySchool(self, e):\r\n        pub.sendMessage(\"request_major\", sch=self.schCbox1.get())\r\n\r\n    def getMinorBySchool(self, e):\r\n        pub.sendMessage(\"request_minor\", sch=self.schCbox2.get())\r\n\r\n    # fill major treeview from program planning worksheet\r\n    def setMajor_treeview(self):\r\n        for id in self.majorTree.get_children():  # clear tree view\r\n            self.majorTree.delete(id)\r\n\r\n        self.selected_major_Box.select_set(0, END)\r\n        for i in self.selected_major_Box.curselection():\r\n            word = self.selected_major_Box.get(i)\r\n            self.majorTree.insert(parent='', index='end', iid=i, text=str(word))\r\n\r\n    def setMinor_treeview(self):\r\n        for id in self.minorTree.get_children():\r\n            self.minorTree.delete(id)\r\n\r\n        self.selected_minor_Box.select_set(0, END)\r\n        for i in self.selected_minor_Box.curselection():\r\n            word = self.selected_minor_Box.get(i)\r\n            self.minorTree.insert(parent='', index='end', iid=i, text=str(word))\r\n\r\n    def planningWorksheet_addCourseButton(self):\r\n        t = Toplevel(self.mainwin)\r\n        t.wm_title(\"Search for Course\")\r\n        t.geometry(\"450x125\")\r\n        t.resizable(width=FALSE, height=FALSE)\r\n        t.transient(self.mainwin)\r\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\r\n\r\n        def close(e):\r\n            self.addCourseButton.configure(state=NORMAL)\r\n            t.destroy()\r\n\r\n        t.bind('<Destroy>', close)\r\n        self.addCourseButton.configure(state=DISABLED)\r\n\r\n        def courseSearch(e):\r\n            course = entry.get()\r\n            if len(course) > 7:\r\n                if len(course.split()[1]) == 3:\r\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\r\n                    self.resultVar.set(\r\n                        self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\r\n                        self.addCourseSearchResult[2] + \" \" * 3 +\r\n                        self.addCourseSearchResult[3])\r\n                else:\r\n                    self.resultVar.set(\"\")\r\n            else:\r\n                self.resultVar.set(\"\")\r\n\r\n        # adds searched course into the treeview\r\n        def addCourse():\r\n            self.courseTree.insert(parent='', index='end', iid=self.courseTree_counter, text=\"\",\r\n                                   values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\r\n                                           self.addCourseSearchResult[2],\r\n                                           int(float(self.addCourseSearchResult[3])),\r\n                                           genEntry.get()))\r\n            self.courseTree_counter += 1\r\n            genEntry.delete(0, END)\r\n\r\n            prevcred = self.enrollCredVar.get()\r\n            self.enrollCredVar.set(prevcred + int(float(self.addCourseSearchResult[3])))\r\n\r\n        courseEntryFrame = Frame(t)\r\n        courseEntryFrame.pack(anchor=CENTER)\r\n\r\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\r\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\r\n        entry.pack(side=LEFT)\r\n\r\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\r\n\r\n        resultFrame = Frame(t)\r\n        resultFrame.pack(anchor=CENTER)\r\n\r\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\r\n        resultEntry.pack(side=TOP)\r\n\r\n        genedFrame = Frame(t)\r\n        genedFrame.pack(anchor=CENTER)\r\n\r\n        l2 = Label(genedFrame, text=\"gen ed/elect:\").pack(side=LEFT, anchor=NW)\r\n\r\n        genEntry = ttk.Entry(genedFrame)\r\n        genEntry.pack(side=TOP)\r\n\r\n        addButton = Button(genedFrame, text=\"Add\", command=addCourse)\r\n        addButton.pack(side=TOP)\r\n\r\n    def planningWorksheet_delCourseButton(self):\r\n        for course in self.courseTree.selection():\r\n            msg = \"Do you want to remove the selected course? (\" + self.courseTree.item(course)['values'][0] + \")\"\r\n            response = messagebox.askquestion(\"askquestion\", msg)\r\n            if response == 'yes':\r\n                prevcred = self.enrollCredVar.get()\r\n                self.enrollCredVar.set(prevcred - int(float(self.courseTree.item(course)['values'][2])))\r\n\r\n                self.courseTree.delete(course)\r\n                self.courseTree_counter -= 1\r\n\r\n    def planningWorksheet_addBackupCourseButton(self):\r\n        t = Toplevel(self.mainwin)\r\n        t.wm_title(\"Search for Backup Course\")\r\n        t.geometry(\"450x125\")\r\n        t.resizable(width=FALSE, height=FALSE)\r\n        t.transient(self.mainwin)\r\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\r\n\r\n        def close(e):\r\n            self.addBackupButton.configure(state=NORMAL)\r\n            t.destroy()\r\n\r\n        t.bind('<Destroy>', close)\r\n        self.addBackupButton.configure(state=DISABLED)\r\n\r\n        def courseSearch(e):\r\n            course = entry.get()\r\n            if len(course) > 7:\r\n                if len(course.split()[1]) == 3:\r\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\r\n                    self.resultVar.set(self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\r\n                                       self.addCourseSearchResult[2] + \" \" * 3 +\r\n                                       self.addCourseSearchResult[3])\r\n                else:\r\n                    self.resultVar.set(\"\")\r\n            else:\r\n                self.resultVar.set(\"\")\r\n\r\n        def addCourse():\r\n            self.backupCourseTree.insert(parent='', index='end', iid=self.backupCourseTree_counter, text=\"\",\r\n                                         values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\r\n                                                 self.addCourseSearchResult[2],\r\n                                                 int(float(self.addCourseSearchResult[3])),\r\n                                                 genEntry.get()))\r\n            self.backupCourseTree_counter += 1\r\n            genEntry.delete(0, END)\r\n\r\n            prevcred = self.enrollCredVar.get()\r\n            self.enrollCredVar.set(prevcred + int(float(self.addCourseSearchResult[3])))\r\n\r\n        courseEntryFrame = Frame(t)\r\n        courseEntryFrame.pack(anchor=CENTER)\r\n\r\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\r\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\r\n        entry.pack(side=LEFT)\r\n\r\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\r\n\r\n        resultFrame = Frame(t)\r\n        resultFrame.pack(anchor=CENTER)\r\n\r\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\r\n        resultEntry.pack(side=TOP)\r\n\r\n        genedFrame = Frame(t)\r\n        genedFrame.pack(anchor=CENTER)\r\n\r\n        l2 = Label(genedFrame, text=\"gen ed/elect:\").pack(side=LEFT, anchor=NW)\r\n\r\n        genEntry = ttk.Entry(genedFrame)\r\n        genEntry.pack(side=TOP)\r\n\r\n        addButton = Button(genedFrame, text=\"Add\", command=addCourse)\r\n        addButton.pack(side=TOP)\r\n\r\n    def planningWorksheet_delBackupCourseButton(self):\r\n        for course in self.backupCourseTree.selection():\r\n            msg = \"Do you want to remove the selected backup course? (\" + self.backupCourseTree.item(course)['values'][\r\n                0] + \")\"\r\n            response = messagebox.askquestion(\"askquestion\", msg)\r\n            if response == 'yes':\r\n                self.backupCourseTree.delete(course)\r\n                self.backupCourseTree_counter -= 1\r\n\r\n    # clears every widget\r\n    def planningWorksheet_reset(self):\r\n        self.courseHist.clear()\r\n        self.nameEntry.delete(0, END)\r\n        self.idEntry.delete(0, END)\r\n\r\n        for id in self.majorTree.get_children():\r\n            self.majorTree.delete(id)\r\n\r\n        for id in self.minorTree.get_children():\r\n            self.minorTree.delete(id)\r\n\r\n        self.seasonVar.set(\"\")\r\n\r\n        self.enrollCredVar.set(0)\r\n\r\n        self.earnCredEntry['state'] = NORMAL\r\n        self.earnCredEntry.delete(0, END)\r\n        self.earnCredEntry['state'] = 'readonly'\r\n\r\n        self.enrlDateEntry.delete(0, END)\r\n        self.memoEntry.delete('1.0', 'end')\r\n\r\n        for course in self.courseTree.get_children():\r\n            self.courseTree.delete(course)\r\n        self.courseTree_counter = 0\r\n\r\n        for course in self.backupCourseTree.get_children():\r\n            self.backupCourseTree.delete(course)\r\n        self.backupCourseTree_counter = 0\r\n\r\n    def planningWorksheet_fill(self, obj, tcred, courses, numbCourse, major, minor, bcourses,\r\n                               courseHist, fourYear, minorFourYear, minorReqList, policies):\r\n        # obj is a py dict\r\n\r\n        # clear data in widgets\r\n        self.planningWorksheet_reset()\r\n\r\n        self.courseHist = courseHist\r\n        self.nameEntry.insert(END, obj['name'])\r\n        self.idEntry.insert(END, obj['s_id'])\r\n        self.seasonVar.set(obj['registering_for'])\r\n\r\n        index = 0\r\n        for m in major:\r\n            self.majorTree.insert(parent='', index='end', iid=index, text=m)\r\n            index = index + 1\r\n        index = 0\r\n        for m in minor:\r\n            self.minorTree.insert(parent='', index='end', iid=index, text=m)\r\n            index = index + 1\r\n\r\n        self.earnCredEntry['state'] = NORMAL\r\n        self.earnCredEntry.insert(END, obj['credits'])\r\n        self.earnCredEntry['state'] = 'readonly'\r\n\r\n        self.enrollCredVar.set(tcred)\r\n\r\n        self.enrlDateEntry.insert(END, obj['enrll'])\r\n        self.memoEntry.insert('1.0', obj['memo'])\r\n\r\n        for c in courses:\r\n            self.courseTree.insert(parent='', index='end', iid=self.courseTree_counter, text=\"\",\r\n                                   values=(c[0], c[1], c[2], c[3]))\r\n            self.courseTree_counter += 1\r\n\r\n        for c in bcourses:\r\n            self.backupCourseTree.insert(parent='', index='end', iid=self.backupCourseTree_counter, text=\"\",\r\n                                         values=(c[0], c[1], c[2], c[3]))\r\n            self.backupCourseTree_counter += 1\r\n\r\n        self.courseTakenList_fill()\r\n\r\n    def courseTakenList_layout(self):\r\n        label = Label(self.courseTakenListFrame, text=\"Course Taken List\", font=('Helvetica', 19))\r\n        label.pack(anchor=CENTER, side=TOP, pady=20)\r\n\r\n        self.courseTakenListTree = ttk.Treeview(self.courseTakenListFrame, show=\"tree\", height=38,\r\n                                                style=\"mystyle.Treeview\")\r\n        self.courseTakenListTree['columns'] = (\"grade\")\r\n        self.courseTakenListTree.column(\"#0\")\r\n        self.courseTakenListTree.column(\"grade\")\r\n\r\n        for subj in self.subjectsList:\r\n            self.courseTakenListTree.insert(parent='', index='end', iid=self.courseTakenList_counter, text=str(subj))\r\n            self.courseTakenList_counter += 1\r\n\r\n    def courseTakenList_reset(self):\r\n        self.courseTakenListTree.pack_forget()\r\n        for subj in self.courseTakenListTree.get_children():\r\n            self.courseTakenListTree.delete(subj)\r\n        self.courseTakenList_counter = 0\r\n\r\n        for subj in self.subjectsList:\r\n            self.courseTakenListTree.insert(parent='', index='end', iid=self.courseTakenList_counter, text=str(subj))\r\n            self.courseTakenList_counter += 1\r\n\r\n    def courseTakenList_fill(self):\r\n        self.courseTakenList_reset()\r\n        self.courseTakenListTree.pack(side=TOP, padx=50, pady=10, fill=X)\r\n\r\n        for sem in self.courseHist:\r\n            for course in sem:\r\n                for id in self.courseTakenListTree.get_children():\r\n                    if course[1] == self.courseTakenListTree.item(id)['text']:  # comparing subjects\r\n                        name = str(course[1] + \" \" + course[2] + \" \" * 5 + course[3])\r\n                        self.courseTakenListTree.insert(parent=str(id), index='end', iid=self.courseTakenList_counter,\r\n                                                        text=name, values=(course[5]))\r\n                        self.courseTakenList_counter += 1\r\n\r\n        for id in self.courseTakenListTree.get_children():\r\n            if not self.courseTakenListTree.get_children(id):\r\n                self.courseTakenListTree.delete(id)\r\n\r\n    def menuBar(self):\r\n        menu = Menu(self.mainwin, tearoff=0)\r\n        self.mainwin.config(menu=menu)\r\n\r\n        self.schedule = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label='Schedule', menu=self.schedule)\r\n        self.scheduleMenu()\r\n\r\n        load = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label='View', menu=load)\r\n        self.loadMenu(load)\r\n\r\n        # DataBase\r\n        DB = Menu(menu, tearoff=0)\r\n        menu.add_cascade(label='Update DB', menu=DB)\r\n        self.DataBaseMenu(DB)\r\n\r\n    # schedule menu dropdown\r\n    def scheduleMenu(self):\r\n        self.schedule.add_command(label='New', command=self.newSchedule)\r\n        self.schedule.add_command(label='Open...', command=self.openSchedule)\r\n        self.schedule.add_separator()\r\n        self.schedule.add_command(label='Save', command=self.saveSchedule)\r\n        self.schedule.add_separator()\r\n        self.schedule.add_command(label='Export', command=self.exportSchedule)\r\n        self.schedule.add_command(label='Print', command=self.printSchedule)\r\n\r\n    def newSchedule(self):\r\n        self.planningWorksheet_reset()\r\n        self.FYP_reset()\r\n        self.courseTakenList_reset()\r\n        # Removes buttons when student information is not present\r\n        self.addProgRepoBtn.grid_forget()\r\n        self.removeProgRepoBtn.grid_forget()\r\n\r\n    def openSchedule(self):\r\n        t = Toplevel(self.mainwin)\r\n        t.wm_title(\"Search for Student\")\r\n        t.geometry(\"450x125\")\r\n        t.resizable(width=0, height=0)\r\n        t.attributes('-topmost', 'true')\r\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\r\n\r\n        def close(e):\r\n            self.schedule.entryconfigure(1, state=NORMAL)\r\n            t.destroy()\r\n\r\n        t.bind('<Destroy>', close)\r\n        self.schedule.entryconfigure(1, state=DISABLED)\r\n\r\n        def openScheduleSearchButton():\r\n            name = fnameE.get() + \" \" + lnameE.get()\r\n            id = idE.get()\r\n            if name != \"\" and id != \"\":\r\n                pub.sendMessage(\"request_PPW\", name=name, id=int(id))\r\n                self.schedule.entryconfigure(1, state=NORMAL)\r\n                t.destroy()\r\n                # Shows buttons for Progress Report when student information is present\r\n                self.addProgRepoBtn.grid(column=0, row=0, sticky=E, padx=120)\r\n                self.removeProgRepoBtn.grid(column=0, row=0, sticky=E, padx=25)\r\n\r\n        nameFrame = Frame(t)\r\n        nameFrame.pack(side=TOP, anchor='w', padx=20, pady=10)\r\n\r\n        idFrame = Frame(t)\r\n        idFrame.pack(side=TOP, anchor='w', padx=20)\r\n\r\n        butFrame = Frame(t)\r\n        butFrame.pack(side=BOTTOM, anchor=CENTER, pady=10)\r\n\r\n        label2 = Label(nameFrame, text='First name:').pack(side=LEFT)\r\n        fnameE = ttk.Entry(nameFrame, width=10)\r\n        fnameE.pack(side=LEFT)\r\n\r\n        lnameE = ttk.Entry(nameFrame, width=15)\r\n        lnameE.pack(side=RIGHT)\r\n        label3 = Label(nameFrame, text='Last name:').pack(side=RIGHT)\r\n\r\n        label3 = Label(idFrame, text='Student Id:').pack(side=LEFT)\r\n        idE = ttk.Entry(idFrame, width=10)\r\n        idE.pack(side=LEFT)\r\n\r\n        searchB = Button(butFrame, text='Search', command=openScheduleSearchButton)\r\n        searchB.pack()\r\n\r\n    def saveSchedule(self):\r\n        majors, minors = [], []\r\n        for id in self.majorTree.get_children():\r\n            majors.append(self.majorTree.item(id)['text'])\r\n        for id in self.minorTree.get_children():\r\n            minors.append(self.minorTree.item(id)['text'])\r\n\r\n        courses, bcourses = [], []\r\n        for id in self.courseTree.get_children():\r\n            courses.append(self.courseTree.item(id)['values'])\r\n        for id in self.backupCourseTree.get_children():\r\n            bcourses.append(self.backupCourseTree.item(id)['values'])\r\n\r\n        pydict = {\r\n            \"name\": self.nameEntry.get(),\r\n            \"s_id\": self.idEntry.get(),\r\n            # \"dept\": ,\r\n            \"major\": majors,\r\n            \"minor\": minors,\r\n            \"taking_course\": courses,\r\n            \"backup_course\": bcourses\r\n        }\r\n        pub.sendMessage(\"save_schedule\", obj=pydict)\r\n\r\n    def exportSchedule(self):\r\n        print(\"Export schedule\")\r\n\r\n    def printSchedule(self):\r\n        print(\"Print schedule\")\r\n\r\n    def loadMenu(self, major):\r\n        major.add_command(label='Four Year Plan', command=self.showFourYearPlan)\r\n        major.add_command(label='Course Taken List', command=self.showCourseTakenList)\r\n        major.add_separator()\r\n        major.add_command(label='Major Checklist')\r\n        major.add_command(label='Minor Checklist')\r\n\r\n    def showFourYearPlan(self):\r\n        self.courseTakenListFrame.pack_forget()\r\n        self.leftFrame.pack(side=LEFT, fill=Y)\r\n\r\n    def showCourseTakenList(self):\r\n        self.leftFrame.pack_forget()\r\n        self.courseTakenListFrame.pack(side=LEFT, fill=Y)\r\n        self.courseTakenListFrame['width'] = self.left_width\r\n        self.courseTakenListFrame.propagate(0)\r\n\r\n    # data base menu dropdown\r\n    def DataBaseMenu(self, DB):\r\n        DB.add_command(label='Current Semester Course')\r\n        DB.add_separator()\r\n        DB.add_command(label='Add/Remove a School')\r\n        DB.add_command(label='Add/remove a Major')\r\n        DB.add_command(label='Add/Remove a minor')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/View.py b/View.py
--- a/View.py	
+++ b/View.py	
@@ -1062,9 +1062,12 @@
         self.courseTakenListFrame['width'] = self.left_width
         self.courseTakenListFrame.propagate(0)
 
+    def openCSV(self):
+        pub.sendMessage("request_CSV")
+
     # data base menu dropdown
     def DataBaseMenu(self, DB):
-        DB.add_command(label='Current Semester Course')
+        DB.add_command(label='Current Semester Course', command=self.openCSV)
         DB.add_separator()
         DB.add_command(label='Add/Remove a School')
         DB.add_command(label='Add/remove a Major')
Index: Controller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from View import View\r\nfrom Model import Model\r\nfrom tkinter import *\r\n# from tkinter import ttk\r\nfrom pubsub import pub\r\n\r\nclass Controller:\r\n    def __init__(self, master):\r\n        self.model = Model()\r\n        self.view = View(master, self.model.getSchools(), self.model.getSubjects())\r\n\r\n        pub.subscribe(self.newSchedule, \"New Menu Dropdown Pressed\")\r\n\r\n        # for populating planning worksheet\r\n        pub.subscribe(self.planningWorksheet_open,\"request_PPW\")\r\n        pub.subscribe(self.view.planningWorksheet_fill,\"PPW_information\")\r\n        pub.subscribe(self.addCourse, \"request_course#\")\r\n\r\n        # for populating Four Year Plan\r\n        # pub.subscribe(self.fourYearPlan_open, \"request_FYP\")\r\n        pub.subscribe(self.view.fourYearPlan_fill, \"PPW_information\")\r\n\r\n        # for specific mojor and minor under a school\r\n        pub.subscribe(self.setMajor, \"request_major\")\r\n        pub.subscribe(self.setMinor, \"request_minor\" )\r\n\r\n        # for saving info from program planning sheet\r\n        pub.subscribe(self.saveSchedule, \"save_schedule\")\r\n\r\n    def newSchedule(self):\r\n        self.schedule = Toplevel()\r\n        self.schedule.geometry('1000x600')\r\n        # Need to fill title with name of student from database\r\n        self.schedule.title(\"Insert Person Name Here\")\r\n        # Need to send information from database to this new window\r\n\r\n    def fourYearPlan_open(self, name, id):\r\n        # self.model.getStudent(\"Bob Robert\", \"7654321\")\r\n        self.model.getStudent(name, id)\r\n\r\n    def planningWorksheet_open(self, name, id):\r\n        # self.model.getStudent(\"Bob Robert\", \"7654321\")\r\n        self.model.getStudent(name, id)\r\n\r\n    def addCourse(self, sub, cat):\r\n        self.view.addCourseSearchResult = list( self.model.getCoursebySubCat(sub.upper(), cat))\r\n\r\n    def setMajor(self, sch):\r\n        self.view.majorVar.set( self.model.getMajorsbySchool(sch) )\r\n\r\n    def setMinor(self, sch):\r\n        self.view.minorVar.set( self.model.getMinorsbySchool(sch) )\r\n\r\n    def saveSchedule(self, obj):\r\n        self.model.updateStudent(obj)\r\n\r\nif __name__==\"__main__\":\r\n    root = Tk()\r\n    app = Controller(root)\r\n    root.mainloop()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller.py b/Controller.py
--- a/Controller.py	
+++ b/Controller.py	
@@ -27,6 +27,8 @@
         # for saving info from program planning sheet
         pub.subscribe(self.saveSchedule, "save_schedule")
 
+        pub.subscribe(self.openPPW, "request_CSV")
+
     def newSchedule(self):
         self.schedule = Toplevel()
         self.schedule.geometry('1000x600')
@@ -54,6 +56,9 @@
     def saveSchedule(self, obj):
         self.model.updateStudent(obj)
 
+    def openPPW(self):
+        self.model.openCSV()
+
 if __name__=="__main__":
     root = Tk()
     app = Controller(root)
Index: Model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter.filedialog import askopenfilename\r\nimport json\r\nfrom pubsub import pub  # pip install PyPubSub\r\nimport pymongo\r\nfrom bson.regex import Regex\r\n\r\nclient = pymongo.MongoClient(\r\n    \"mongodb+srv://COSC425AAT:ucciEcY4ItzL6BRN@cluster0.qmhln.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\")\r\ndb = client['COSC425AAT']\r\n\r\n\r\nclass Model:\r\n    def __init__(self):\r\n        return\r\n\r\n    def listAllMajors(self):\r\n        myCol = db.get_collection('Department')\r\n        obj = myCol.find({'Plan Type': 'Major'})\r\n        majors = []\r\n        for i in obj:\r\n            majors.append(i['Acad Plan'])\r\n        return majors\r\n\r\n    def listAllMinors(self):\r\n        myCol = db.get_collection('Department')\r\n        obj = myCol.find({'Plan Type': 'Minor'})\r\n        minors = []\r\n        for i in obj:\r\n            minors.append(i['Acad Plan'])\r\n        return minors\r\n\r\n    def getSchools(self):\r\n        myCol = db.get_collection(\"Department\")\r\n        schools = myCol.distinct('School')\r\n        return schools\r\n\r\n    def getMajorsbySchool(self, schools):\r\n        majList = []\r\n        myCol = db.get_collection(\"Department\")\r\n        obj = myCol.find({\"$and\": [{\"School\": schools, \"Plan Type\": \"Major\"}]})\r\n        for i in obj:\r\n            majList.append(i['Acad Plan'])\r\n        return majList\r\n\r\n    def getMinorsbySchool(self, schools):\r\n        minList = []\r\n        myCol = db.get_collection(\"Department\")\r\n        obj = myCol.find({\"$and\": [{\"School\": schools, \"Plan Type\": \"Minor\"}]})\r\n        for i in obj:\r\n            minList.append(i['Acad Plan'])\r\n        return minList\r\n\r\n    # Get a course by searching for subject and catalog\r\n    def getCoursebySubCat(self, sub, cat):\r\n        myCol = db.get_collection('Course')\r\n        spacer = \" \"\r\n        newCat = spacer + cat\r\n        obj = myCol.find_one({'$and': [{'Subject': sub}, {'Catalog': newCat}]})\r\n        courseInfo = []\r\n        courseInfo.append(obj['Subject'])\r\n        courseInfo.append(obj['Catalog'])\r\n        courseInfo.append(obj['Long Title'])\r\n        courseInfo.append(obj['Allowd Unt'])\r\n        return courseInfo\r\n\r\n    # Displays what prereqs are necessary for a subject + catalog\r\n    def getPreReq(self, subject, catalog):\r\n        myCol = db.get_collection('Course')\r\n        obj = myCol.find_one({'$and': [{'Subject': subject}, {'Catalog': catalog}]})\r\n        print(obj['RQ Descr(Descrlong)'])\r\n\r\n    def getSubjects(self):\r\n        myCol = db.get_collection('Catalog')\r\n        obj = myCol.distinct('Subject')\r\n        return obj\r\n\r\n    def pullStud(self, id, fname):\r\n        client = pymongo.MongoClient(\r\n                \"mongodb+srv://COSC425AAT:ucciEcY4ItzL6BRN@cluster0.qmhln.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\")\r\n        db = client['COSC425AAT']\r\n        stud = db[\"Student\"]\r\n        query = {\"s_id\": id}\r\n        curs = stud.find(query)\r\n        data = {}\r\n        for i in curs:\r\n            data[\"name\"] = i['name']\r\n            data[\"s_id\"] = i['s_id']\r\n            data[\"major\"] = i['major']\r\n            data[\"dept\"] = i['dept']\r\n            data['minor'] = i['minor']\r\n            data[\"status\"] = i['status']\r\n            data[\"year\"] = i['year']\r\n            data[\"credits\"] = i['credits']\r\n            data[\"sem_id\"] = i['sem_id']\r\n            data[\"registering_for\"] = i['registering_for']\r\n            data[\"enrll\"] = i['enrll']\r\n            data[\"advisor_mail\"] = i['advisor_mail']\r\n            data[\"memo\"] = i['memo']\r\n            data[\"course_taken\"] = i['course_taken']\r\n            data[\"taking_course\"] = i['taking_course']\r\n            data[\"backup_course\"] = i['backup_course']\r\n            data[\"four_year\"] = i['four_year']\r\n            with open(fname, 'w+') as f:\r\n                json.dump(data, f, indent=4)\r\n\r\n    def getStudent(self, sname, sid):\r\n        myCol = db.get_collection('Student')\r\n        obj2 = myCol.aggregate([{u\"$project\": {u\"count\": {u\"$size\": u\"$course_taken\"}}}])\r\n        for i in obj2:\r\n            cnt = int(i['count'])\r\n        obj = myCol.find_one({'$and': [{'name': str(sname)}, {'s_id': int(sid)}]})\r\n        numbCourses = cnt\r\n        cred = 0\r\n        courses = []\r\n        backup = []\r\n        majList = []\r\n        minList = []\r\n        for c in obj['taking_course']:\r\n            courseID = c['subject'] + \" \" + c['catalog']\r\n            courses.append((courseID, c['title'], c['cred'], c['genED']))\r\n            cred += c['cred']\r\n\r\n        for c in obj['backup_course']:\r\n            courseID = c['subject'] + \" \" + c['catalog']\r\n            backup.append((courseID, c['title'], c['cred'], c['genED']))\r\n\r\n        for c in (obj['major']):\r\n            majList.append(c['title'])\r\n\r\n        for c in (obj['minor']):\r\n            minList.append(c['title'])\r\n\r\n        courseList = []  # course list\r\n        majorFourList = []  # major four year plan list (return value)\r\n        minorFourList = []  # minor four year plan list (return value)\r\n        minorReqList = []\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n        courseHist = []  # four year plan list (return value)\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n\r\n        # Gets total number of semesters through error handling\r\n        for j in range(15):  # Max of 15 possible semesters taken\r\n            stri = \"semester_\"  # Append which semester to string\r\n            stri = stri + sem\r\n            try:  # Error checks is semester is out of range\r\n                (obj['course_taken'][0][stri])  # Sets the total to the currently viewed semester\r\n                total = int(sem)\r\n            except KeyError as b:\r\n                total = total  # Last none KeyError semester is stored\r\n            sem = str(int(sem) + 1)\r\n        # print(total)\r\n\r\n        for k in range(total):  # Iterates through each semester from previously calculated value\r\n            stri = \"semester_\"  # Appends which semester to a string\r\n            stri = stri + str(k + 1)\r\n            # Gets total number of courses through error handling\r\n            courseList = []\r\n            for l in range(8):  # Max of 8 possible courses taken during any given semester\r\n\r\n                try:  # Checks for Array index error\r\n                    (obj['course_taken'][0][stri][l])\r\n                    ctotal = l + 1  # Sets total number of courses to currently viewed course\r\n                    resl = [k, obj['course_taken'][0][stri][l]['subject'], obj['course_taken'][0][stri][l]['catalog'],\r\n                            obj['course_taken'][0][stri][l]['title'],\r\n                            obj['course_taken'][0][stri][l]['credits'], obj['course_taken'][0][stri][l][\r\n                                'grade']]  # Creates a string value of each objects within array\r\n                    courseList.append(resl)  # Appends that string to a course list\r\n                    numbCourses = numbCourses + 1\r\n                except IndexError as d:\r\n                    ctotal = ctotal  # Last none index error course number is stored\r\n            # print(ctotal)\r\n            courseHist.append(courseList)\r\n        policies = []\r\n        for i in range(len(obj['major'])):\r\n            majorFourList.append(self.getFourYear(majList[i]))\r\n            policies.append(self.getPolicies(majList[i]))\r\n        for i in range(len(obj['minor'])):\r\n            minorFourList.append(self.getMinorPlanCourse(minList[i]))\r\n            minorReqList.append(self.getMinorPlanReq(minList[i]))\r\n            policies.append(self.getMinorUnivReq(minList[i]))\r\n            # First array initializer corresponds to which semester you are viewing course for\r\n            # Ex.  fourList[0][1]  =  The first semester and the second course the took that semester\r\n\r\n            # All below represnt the second array initializer which corresponds to individual information for a course\r\n            # [0] = The first value indicates which semester the course is for\r\n            # [1] = The subject of the course\r\n            # [2] = The catalog of the course\r\n            # [3] = The title of the course\r\n            # [4] = The number of credits for the course\r\n\r\n            # [0, 'ENGL', '103', 'Composition and Research', '4']    Example output for fourList[0][2]\r\n\r\n        pub.sendMessage(\"PPW_information\", obj=obj, tcred=cred, courses=courses, numbCourse=numbCourses, major=majList, minor=minList,\r\n                        bcourses=backup, courseHist=courseHist, fourYear=majorFourList, minorFourYear=minorFourList,minorReqList=minorReqList,  policies=policies)\r\n        # pub.sendMessage(\"FYP_information\", obj=obj, courseHist=fourList)\r\n\r\n    def getPolicies(self, major):\r\n        myCol = db.get_collection('FourYear')\r\n        i = myCol.find_one({'major': major})\r\n        return i['policies']\r\n\r\n    def delStud(self, id):\r\n        stud = db[\"Student\"]\r\n        query = {\"s_id\": int(id)}\r\n        info = stud.delete_many(query)\r\n        if info.deleted_count == 1:\r\n            return \"one entry deleted\"\r\n        elif info.deleted_count == 0:\r\n            return \"no matches found, deleted 0 entries\"\r\n        else:\r\n            return str(info.deleted_count) + \" entries deleted\"\r\n\r\n    def delCrs(self, sub, num):\r\n        crs = db[\"Course\"]\r\n        query = {\"Subject\": sub, \"Catalog\": Regex(u\".*{0}.*\".format(num), \"i\")}\r\n        # this \".*string.*\" regex searches for entries containing the given string\r\n        # when searching for a given catalog num normally, the entire string must match\r\n        # a portion of the entries in the db have spaces at the beginning of the catalog num string\r\n        # this regex ignores that space and is true if the field contains the given number anywhere in the string\r\n        info = crs.delete_many(query)\r\n        if info.deleted_count == 1:\r\n            return \"one entry deleted\"\r\n        elif info.deleted_count == 0:\r\n            return \"no matches found, deleted 0 entries\"\r\n        else:\r\n            return str(info.deleted_count) + \" entries deleted\"\r\n\r\n    def delDept(self, acad):\r\n        dept = db[\"Department\"]\r\n        query = {\"Subject\": acad}\r\n        info = dept.delete_many(query)\r\n        if info.deleted_count == 1:\r\n            return \"one entry deleted\"\r\n        elif info.deleted_count == 0:\r\n            return \"no matches found, deleted 0 entries\"\r\n        else:\r\n            return str(info.deleted_count) + \" entries deleted\"\r\n\r\n    def getFourYear(self, major):\r\n        courseList = []  # course list\r\n        fourList = []  # four year plan list (return value)\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n        myCol = db.get_collection('FourYear')\r\n        i = myCol.find_one({'major': major})\r\n\r\n        # fourList.append(i['policies'])\r\n\r\n        # Gets total number of semesters through error handling\r\n        for j in range(15):  # Max of 15 possible semesters taken\r\n            stri = \"semester_\"  # Append which semester to string\r\n            stri = stri + sem\r\n            try:  # Error checks is semester is out of range\r\n                (i[stri])  # Sets the total to the currently viewed semester\r\n                total = int(sem)\r\n            except KeyError as b:\r\n                total = total  # Last none KeyError semester is stored\r\n            sem = str(int(sem) + 1)\r\n        # print(total)\r\n\r\n        for k in range(total):  # Iterates through each semester from previously calculated value\r\n            stri = \"semester_\"  # Appends which semester to a string\r\n            stri = stri + str(k + 1)\r\n            # Gets total number of courses through error handling\r\n            courseList = []\r\n            for l in range(8):  # Max of 8 possible courses taken during any given semester\r\n\r\n                try:  # Checks for Array index error\r\n                    (i[stri][l])\r\n                    ctotal = l + 1  # Sets total number of courses to currently viewed course\r\n                    resl = [k, i[stri][l]['subject'], i[stri][l]['catalog'], i[stri][l]['title'],\r\n                            i[stri][l]['credits']]  # Creates a string value of each objects within array\r\n                    courseList.append(resl)  # Appends that string to a course list\r\n                except IndexError as c:\r\n                    ctotal = ctotal  # Last none index error course number is stored\r\n            # print(ctotal)\r\n            fourList.append(courseList)\r\n        return fourList\r\n\r\n    def getMinorUnivReq(self, minor):\r\n        reqList = []  # req list\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n        myCol = db.get_collection('MinPlan')\r\n        i = myCol.find_one({'minor': minor})\r\n        policy = i['university_policies'] + i['minor_req']\r\n        reqList.append(policy)\r\n        return reqList\r\n\r\n    def getMinorPlanReq(self, minor):\r\n        reqList = []  # req list\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n        myCol = db.get_collection('MinPlan')\r\n        i = myCol.find_one({'minor': minor})\r\n\r\n        # Gets total number of reqs through error handling\r\n        for j in range(15):  # Max of 15 possible reqs\r\n            stri = \"req\"  # Append which req to string\r\n            stri = stri + sem\r\n            try:  # Error checks is req is out of range\r\n                (i[stri])  # Sets the total to the currently viewed req\r\n                total = int(sem)\r\n                resl = [j, i[stri]]\r\n                reqList.append(resl)  # Appends that string to a req list\r\n            except KeyError as b:\r\n                total = total  # Last none KeyError semester is stored\r\n            sem = str(int(sem) + 1)\r\n        return reqList\r\n\r\n    def getMinorPlanCourse(self, minor):\r\n        courseList = []  # course list\r\n        minList = []  # four year plan list (return value)\r\n        sem = \"1\"  # Keeps track of which semester in database\r\n        total = 0  # Total number of semesters\r\n        ctotal = 0  # Total number of courses in a semester\r\n\r\n        myCol = db.get_collection('MinPlan')\r\n        i = myCol.find_one({'minor': minor})\r\n\r\n        # fourList.append(i['policies'])\r\n\r\n        # Gets total number of semesters through error handling\r\n        for j in range(15):  # Max of 15 possible semesters needed\r\n            stri = \"crs\"  # Append which semester to string\r\n            stri = stri + sem\r\n            try:  # Error checks is semester is out of range\r\n                (i[stri])  # Sets the total to the currently viewed semester\r\n                total = int(sem)\r\n            except KeyError as b:\r\n                total = total  # Last none KeyError semester is stored\r\n            sem = str(int(sem) + 1)\r\n\r\n        for k in range(total):  # Iterates through each semester from previously calculated value\r\n            stri = \"crs\"  # Appends which semester to a string\r\n            stri = stri + str(k + 1)\r\n            # Gets total number of courses through error handling\r\n            courseList = []\r\n            for l in range(8):  # Max of 8 possible courses taken during any given semester\r\n\r\n                try:  # Checks for Array index error\r\n                    (i[stri][l])\r\n                    ctotal = l + 1  # Sets total number of courses to currently viewed course\r\n                    resl = [k, i[stri][l]['subject'], i[stri][l]['catalog'], i[stri][l]['title'],\r\n                            i[stri][l]['credits']]  # Creates a string value of each objects within array\r\n                    courseList.append(resl)  # Appends that string to a course list\r\n                except IndexError as c:\r\n                    ctotal = ctotal  # Last none index error course number is stored\r\n            minList.append(courseList)\r\n        return minList\r\n\r\n    def openJson(self):\r\n        path = askopenfilename(\r\n            initialdir=\"./\",\r\n            filetypes=[(\"JSON File\", \"*.json\"), (\"All Files\", \".\")],\r\n            title=\"Choose a Student Schedule file\")\r\n\r\n        if len(path) > 0:\r\n            with open(path) as f:\r\n                data = json.load(f)\r\n        else:\r\n            return\r\n\r\n        numbCourses = len(data['taking_course'])\r\n        cred = 0\r\n        courses = []\r\n        backup = []\r\n        for c in data['taking_course']:\r\n            courseID = [c['subject'], c['catalog']]\r\n            courses.append((courseID, c['title'], c['cred'], c['genED']))\r\n            cred += c['cred']\r\n\r\n        for c in data['backup_course']:\r\n            courseID = [c['subject'], c['catalog']]\r\n            backup.append((courseID, c['title'], c['cred'], c['genED']))\r\n\r\n        pub.sendMessage(\"PPW_information\", arg1=data, arg2=cred, arg3=courses, arg4=numbCourses, arg5=backup)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Model.py b/Model.py
--- a/Model.py	
+++ b/Model.py	
@@ -1,5 +1,6 @@
 from tkinter.filedialog import askopenfilename
 import json
+import csv
 from pubsub import pub  # pip install PyPubSub
 import pymongo
 from bson.regex import Regex
@@ -361,6 +362,27 @@
             minList.append(courseList)
         return minList
 
+    def openCSV(self):
+        myCol = db.get_collection("Crs Test")
+        header = ["Course ID", "Eff Date", "Status", "Catalog Descr", "Equiv Crs", "Allowd Unt", "Allow Comp", "Long Title", "Descr", "Offer Nbr", "Acad Group", "Subject", "Catalog", "Acad Org", "CIP Code", "HEGIS Code", "Component", "Equiv Crs", "Course ID", "CRSE ID Descr", "Crse Attr", "CrsAtr Val", "RQ Designation", "RQ Designation Descr", "RQ Designation Formal Descr", "Rq Group", "RQ GRP Descr", "RQ GRP ShortDescr", "Rq Group", "RQ Usage", "RQ Description(Descr80)", "RQ Descr(DESCR254A)", "RQ Descr(Descrlong)", "Grading"]
+        path = askopenfilename(
+            initialdir="./",
+            filetypes=[("CSV File", "*.csv"), ("All Files", ".")],
+            title="Choose a Course CSV File")
+
+       # if len(path) > 0:
+        res = []
+        with open(path, encoding="utf8") as csv_file:
+            csv_reader = csv.DictReader(csv_file)
+            line_count = 0
+            for each in csv_reader:
+                row = {}
+                for field in header:
+                    row[field] = each[field]
+                myCol.insert_one(row)
+
+
+
     def openJson(self):
         path = askopenfilename(
             initialdir="./",
