Index: View.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\nfrom tkinter import ttk\n# import tkinter as tk\n# from ttkthemes import ThemedTk\nfrom pubsub import pub  # pip install PyPubSub\nimport tkinter.font as TkFont\nimport math\n# from PIL import ImageTk, Image  # pip install pillow\nfrom tkinter import messagebox\n\n\nclass View:\n    def __init__(self, master, schL, subjectL):\n        self.mainwin = master\n        self.mainwin.title(\"Academic Advising Tool\")\n        self.mainwin.geometry(\"{0}x{1}+0+0\".format(master.winfo_screenwidth(), master.winfo_screenheight()))\n\n        # self.mainwin.resizable(width=0, height=0)\n        # 2560 x 1440\n        self.mainwin.deiconify()\n\n        # self.mainwin.call('tk', 'scaling', 0.75)\n\n        self.defaultFont = TkFont.nametofont(\"TkDefaultFont\")\n        self.defaultFont.configure(family='Helvetica', size=14)\n\n        self.TVstyle = ttk.Style()\n        self.TVstyle.configure(\"mystyle.Treeview\", font=('Helvetica', 12))\n        self.TVstyle.configure(\"mystyle.Treeview.Heading\", font=('Helvetica', 12))\n\n        self.schList = schL\n        self.subjectsList = subjectL\n\n        self.courseTree_counter = 0\n        self.backupCourseTree_counter = 0\n        self.courseTakenList_counter = 0\n        self.addCourseSearchResult = []\n        self.resultVar = StringVar()  # for add course button\n\n        self.courseHist = []\n\n        self.layout()\n        self.menuBar()\n\n\n    def layout(self):\n        self.right_width = self.mainwin.winfo_screenwidth() * 0.4\n        self.left_width = self.mainwin.winfo_screenwidth() - self.right_width\n\n        self.mainFrame = ttk.Frame(self.mainwin)\n        self.mainFrame.pack(fill=BOTH, padx=10, pady=10, expand=1, ipadx=10)\n\n        # four year plan\n        self.leftFrame = ttk.Frame(self.mainFrame, width=self.left_width, borderwidth=2, relief=GROOVE)\n        self.leftFrame.pack(side=LEFT, fill=Y, padx=5)\n\n        # program planning worksheet\n        self.PPWFrame = ttk.Frame(self.mainFrame, width=self.right_width, borderwidth=2, relief=GROOVE)\n        self.PPWFrame.pack(side=RIGHT, fill=Y)\n        self.PPWFrame.pack_propagate(0)\n\n        self.courseTakenListFrame = ttk.Frame(self.mainFrame, width=self.left_width, borderwidth=2, relief=GROOVE)\n        self.courseTakenListFrame.pack(side=LEFT, fill=Y, padx=5)\n        #self.courseTakenListFrame.pack_propagate(0)\n        self.courseTakenListFrame.pack_forget()  # hide frame\n\n        self.FourYearPlan()\n        self.planningWorksheet_layout()\n        self.courseTakenList_layout()\n\n    def FourYearPlan(self):\n        # ============================ Scroll Bar ============================\n        self.canvas = Canvas(self.leftFrame, width=self.left_width)  # Creating Canvas for scrollbar\n        self.canvas.pack(side=LEFT, fill=BOTH, expand=1)\n\n        self.scrollbar = ttk.Scrollbar(self.leftFrame, orient=VERTICAL, command=self.canvas.yview)\n        self.scrollbar.pack(side=RIGHT, fill=Y)\n\n        self.canvas.configure(yscrollcommand=self.scrollbar.set)\n        self.canvas.bind('<Configure>', lambda e: self.canvas.configure(scrollregion=self.canvas.bbox(\"all\")))\n\n        self.innerLeftFrame = Frame(self.canvas)\n        self.innerLeftFrame.pack(expand=1)\n\n        self.canvas.create_window((0, 0), window=self.innerLeftFrame, anchor=NW, width=self.left_width)\n\n        # ============================ title ============================\n        ProgPlanTitleFrame = Frame(self.innerLeftFrame, width=self.left_width, height=50)\n        ProgPlanTitleFrame.pack(pady=20)\n\n        ProgPlanTitle = ttk.Label(ProgPlanTitleFrame, text=\"Academic Advising\", anchor=CENTER,\n                                  font=('Helvetica', 19))\n        ProgPlanTitle.pack(side=TOP)\n\n        # ============================ Student Name and ID ============================\n\n        nameIDFrame = Frame(self.innerLeftFrame, width=self.left_width, height=50)\n        nameIDFrame.pack(ipadx=30, ipady=10)\n\n        nameLabel = Label(nameIDFrame, text='Name:')\n        nameLabel.pack(side=LEFT, expand=1)\n\n        self.name2Entry = ttk.Entry(nameIDFrame)\n        self.name2Entry.pack(side=LEFT, expand=1)\n\n        self.id2Entry = ttk.Entry(nameIDFrame, width=8)\n        self.id2Entry.pack(side=RIGHT, expand=1)\n\n        idLabel = Label(nameIDFrame, text='ID Number:')\n        idLabel.pack(side=RIGHT, expand=1)\n\n        # ============================ Policy Memo ============================\n        policyFrame = ttk.LabelFrame(self.innerLeftFrame, height=200, width=self.left_width, text='University Policy:')\n        policyFrame.pack(pady=30)\n\n        self.policyMemoEntry = Text(policyFrame, width=90, height=10)\n        self.policyMemoEntry.pack()\n\n        # ============================ Progress Report ============================\n        # Creation of ttk.Notebook to add tabs to Academic Advising screen\n        self.tab_parent = ttk.Notebook(self.innerLeftFrame)\n\n        # Frame for Progress Report tab\n        self.progressRepoFrame = Frame(self.tab_parent, width=self.left_width)\n        self.progressRepoFrame.pack(fill='both')\n\n        # Event handler to change policy via clicking a tab\n        self.tab_parent.bind('<ButtonRelease>', self.updatePolicy)\n        self.tab_parent.pack(expand=1, fill=X, pady=30, ipady=5)\n\n        self.progLabel = []  # Holds the labels for each semester in Progress Report\n        self.progTable = []  # Holds the treeviews for progress report\n\n        # Treeviews are created for Progress Report tab\n        self.createTable(self.progressRepoFrame, self.progLabel, self.progTable, 8)\n        # Adds the progress report tab ttk.Notebook\n        self.tab_parent.add(self.progressRepoFrame, text=\"Progress Report\")\n\n        # Creating buttons for Progress Report placing with .grid() in FYP_addCourseButton\n        self.addProgRepoBtn = Button(self.progressRepoFrame, text=\"Add\", command=self.FYP_addCourseButton)\n        self.removeProgRepoBtn = Button(self.progressRepoFrame, text=\"Remove\", command=self.FYP_delCourseButton)\n\n        # ============================ Add Semester Table Button ============================\n        \"\"\"\n        self.addSemesterBtn = Button(self.semesterFrame, text=\"Add a semester\")\n        self.addSemesterBtn.pack()\n        self.addSemesterBtn.place(x=120, y=950)\n        self.temp = semesterCounter\n        self.tempY = yPos\n        self.addSemesterBtn['command'] = lambda: self.createSemesterBtn(\"Extra Semester\", self.tempY, self.semTable,\n                                                                        self.semLabel, self.semesterFrame, self.temp)\n        \"\"\"\n\n    def fourYearPlan_fill(self, obj, tcred, courses, numbCourse, major, minor, bcourses,\n                          courseHist, fourYear, minorFourYear, minorReqList, policies):\n        # delete what was previously there then insert\n        self.name2Entry.delete(0, END)\n        self.name2Entry.insert(END, obj['name'])\n\n        self.id2Entry.delete(0, END)\n        self.id2Entry.insert(END, obj['s_id'])\n\n        self.minorReqList = minorReqList  # Copying minor requirements to use as labels for creatTable() (COULD MAKE THIS ENCAPSULATED)\n        self.policies = policies  # Copying policies for other functions (COULD MAKE THIS ENCAPSULATED)\n        self.progTableLength = len(courseHist) # Storing the amount of semesters to make that many treeviews in createTable\n        self.majorsTable = []  # Holds arrays filled with treeviews\n        self.minorsTable = []  # Holds arrays filled with treeviews\n        self.majorFrames = []  # Holds frames major for tabs\n        self.minorFrames = []  # Holds frames minor for tabs\n        self.majorsLabelArray = []  # Holds labels for major tabs\n        self.minorsLabelArray = []  # Holds labels for minor tabs\n\n        self.progTableTree_iid = 0  # Tracks iid for Progress Report treeviews\n        self.majorsTableTree_iid = 0  # Tracks iid for major tables treeviews\n\n        # Destroying and re-creating progress report to handle dynamic amount of semesters\n        for i in self.progTable:\n            i.destroy()\n        for i in self.progLabel:\n            i.destroy()\n\n        self.progTable.clear()\n        self.progLabel.clear()\n\n        # Treeviews are re-created for Progress Report tab with number of semesters student has taken\n        self.createTable(self.progressRepoFrame, self.progLabel, self.progTable, self.progTableLength)\n\n        # Updates canvas to get correct scrollbar size\n        self.canvas.update()\n        self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\n        semIndex = 0\n        for sem in courseHist:  # Filling the Progress Report treeviews with students course history from database\n            self.progTableTree_iid = 0\n            for course in sem:\n                self.progTable[semIndex].insert(parent='', index='end', iid=self.progTableTree_iid,\n                                                values=(course[1] + \" \" + course[2], course[3], course[4]))\n                self.progTableTree_iid += 1\n            semIndex += 1\n\n        for i in range(len(major)): # Filling arrays according to amount of majors a student is doing\n            self.majorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\n            self.majorsTable.append([])  # Creates 2d array each array is a major containing each treeview for a tab\n            self.majorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\n            self.createTable(self.majorFrames[i], self.majorsLabelArray[i], self.majorsTable[i], 8) # Function to populate these arrays\n            self.tab_parent.add(self.majorFrames[i], text=major[i]) # Each frame to the ttk.Notebook to display tab\n\n        for i in range(len(minor)): # Filling arrays according to amount of majors a student is doing\n            self.minorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\n            self.minorsTable.append([])  # Creates 2d array each array is a minor containing each treeview for a tab\n            self.minorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\n            self.createMinorTable(self.minorFrames[i], self.minorsLabelArray[i], self.minorsTable[i]) # Function to populate these arrays\n            self.tab_parent.add(self.minorFrames[i], text=minor[i]) # Each frame to the ttk.Notebook to display tab\n\n        majorIndex = 0\n        for majors in fourYear: # Filling semesters for each major\n            semIndex = 0\n            for sem in majors:\n                self.majorsTableTree_iid = 0\n                for course in sem:\n                    self.majorsTable[majorIndex][semIndex].insert(parent='', index='end',\n                                                                  iid=self.majorsTableTree_iid,\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\n                                                                          course[4]))\n                    self.majorsTableTree_iid += 1\n                semIndex += 1\n            majorIndex += 1\n\n        minorIndex = 0\n        for minors in minorFourYear:  # Filling semesters for each minor\n            semIndex = 0\n            for sem in minors:\n                self.minorTableTree_iid = 0\n                for course in sem:\n                    self.minorsTable[minorIndex][semIndex].insert(parent='', index='end',\n                                                                  iid=self.minorTableTree_iid,\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\n                                                                          course[4]))\n                    self.minorTableTree_iid += 1\n                semIndex += 1\n            minorIndex += 1\n\n        for minors in range(len(self.minorReqList)):\n            for labels in range(len(self.minorReqList[minors])):\n                self.minorsLabelArray[minors][labels]['text'] = self.minorReqList[minors][labels][1]\n\n    def fourYearPlan_refresh(self, major, minor, FourYear, minorFourYear, minorReqList, policies):\n        self.minorReqList = minorReqList  # Copying minor requirements to use as labels for creatTable() (COULD MAKE THIS ENCAPSULATED)\n        self.policies = policies  # Copying policies for other functions (COULD MAKE THIS ENCAPSULATED)\n        self.majorsTable = []  # Holds arrays filled with treeviews\n        self.minorsTable = []  # Holds arrays filled with treeviews\n        self.majorFrames = []  # Holds frames major for tabs\n        self.minorFrames = []  # Holds frames minor for tabs\n        self.majorsLabelArray = []  # Holds labels for major tabs\n        self.minorsLabelArray = []  # Holds labels for minor tabs\n        self.minorLength = len(minor)\n\n        self.progTableTree_iid = 0  # Tracks iid for Progress Report treeviews\n        self.majorsTableTree_iid = 0  # Tracks iid for major tables treeviews\n\n        for i in range(len(major)): # Filling arrays according to amount of majors a student is doing\n            self.majorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\n            self.majorsTable.append([])  # Creates 2d array each array is a major containing each treeview for a tab\n            self.majorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\n            self.createTable(self.majorFrames[i], self.majorsLabelArray[i], self.majorsTable[i], 8) # Function to populate these arrays\n            self.tab_parent.add(self.majorFrames[i], text=major[i]) # Each frame to the ttk.Notebook to display tab\n\n        for i in range(len(minor)): # Filling arrays according to amount of majors a student is doing\n            self.minorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab\n            self.minorsTable.append([])  # Creates 2d array each array is a minor containing each treeview for a tab\n            self.minorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab\n            self.createMinorTable(self.minorFrames[i], minorReqList, self.minorsTable[i]) # Function to populate these arrays\n            self.tab_parent.add(self.minorFrames[i], text=minor[i]) # Each frame to the ttk.Notebook to display tab\n\n        majorIndex = 0\n        for majors in FourYear: # Filling semesters for each major\n            semIndex = 0\n            for sem in majors:\n                self.majorsTableTree_iid = 0\n                for course in sem:\n                    self.majorsTable[majorIndex][semIndex].insert(parent='', index='end',\n                                                                  iid=self.majorsTableTree_iid,\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\n                                                                          course[4]))\n                    self.majorsTableTree_iid += 1\n                semIndex += 1\n            majorIndex += 1\n\n        minorIndex = 0\n        for minors in minorFourYear:  # Filling semesters for each minor\n            semIndex = 0\n            for sem in minors:\n                self.minorTableTree_iid = 0\n                for course in sem:\n                    self.minorsTable[minorIndex][semIndex].insert(parent='', index='end',\n                                                                  iid=self.minorTableTree_iid,\n                                                                  values=(str(course[1] + \" \" + course[2]), course[3],\n                                                                          course[4]))\n                    self.minorTableTree_iid += 1\n                semIndex += 1\n            minorIndex += 1\n\n        for minors in range(len(self.minorReqList)):\n            for labels in range(len(self.minorReqList[minors])):\n                self.minorsLabelArray[minors][labels]['text'] = self.minorReqList[minors][labels][1]\n\n    def FYP_reset(self):\n        self.name2Entry.delete(0, END)\n        self.id2Entry.delete(0, END)\n\n        self.policyMemoEntry.delete('1.0', 'end')\n\n        for sem in self.progTable: # Clear treeviews in Progress Report\n            for course in sem.get_children():\n                sem.delete(course)\n\n        while len(self.progTable) > 8:\n                self.progTable[len(self.progTable)-1].destroy()\n                self.progTable.pop()\n                if(len(self.progTable)%2 == 0):\n                    self.progLabel[len(self.progLabel)-1].destroy()\n                    self.progLabel.pop()\n\n        # Updates canvas to get correct scrollbar size\n        self.canvas.update()\n        self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\n        for majors in self.majorsTable: # Clear treeviews for each major tab\n            for sem in majors:\n                for course in sem.get_children():\n                    sem.delete(course)\n        for minors in self.minorsTable: # Clear treeviews for each minor tab\n            for sem in minors:\n                for course in sem.get_children():\n                    sem.delete(course)\n        self.majorsTable.clear()\n        self.minorsTable.clear()\n        self.majorsLabelArray.clear()\n        self.minorsLabelArray.clear()\n        self.majorFrames.clear()\n        self.minorFrames.clear()\n\n        while (self.tab_parent.index(\"end\") != 1): # Removes the tabs but leaves Progress Report tab\n            self.tab_parent.forget(self.tab_parent.index(\"end\") - 1)\n\n    def FYP_addCourseButton(self):\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Search for Course\")\n        t.geometry(\"450x125\")\n        t.resizable(width=FALSE, height=FALSE)\n        # t.attributes('-topmost', 'true')\n        t.transient(self.mainwin)\n        selectedTreeView = self.progressRepoFrame.focus_get()\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\n\n        def courseSearch(e):\n            course = entry.get()\n            if len(course) > 7:\n                if len(course.split()[1]) == 3:\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\n                    self.resultVar.set(\n                        self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\n                        self.addCourseSearchResult[2] + \" \" * 3 +\n                        self.addCourseSearchResult[3])\n                else:\n                    self.resultVar.set(\"\")\n            else:\n                self.resultVar.set(\"\")\n\n        # adds searched course into the treeview\n        def addCourse():\n            selectedTreeView.insert(parent='', index='end', iid=(len(selectedTreeView.get_children())+1), text=\"\",\n                                    values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\n                                            self.addCourseSearchResult[2]))\n\n        courseEntryFrame = Frame(t)\n        courseEntryFrame.pack(anchor=CENTER)\n\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\n        entry.pack(side=RIGHT)\n\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\n\n        resultFrame = Frame(t)\n        resultFrame.pack(anchor=CENTER)\n\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\n        resultEntry.pack(pady=10)\n\n        addButton = Button(resultFrame, text=\"Add\", command=addCourse)\n        addButton.pack(side=BOTTOM, pady=5)\n\n    def FYP_delCourseButton(self):\n        selectedTreeView = self.progressRepoFrame.focus_get()\n        for course in selectedTreeView.selection():\n            msg = \"Do you want to remove the selected course? (\" + selectedTreeView.item(course)['values'][0] + \")\"\n            response = messagebox.askquestion(\"askquestion\", msg)\n            if response == 'yes':\n                selectedTreeView.delete(course)\n\n    # Function for event handler to change policy memo via clicking a tab\n    def updatePolicy(self, event):\n        selected_tab = event.widget.select()\n        tab_text = event.widget.tab(selected_tab, \"text\")\n        tab_index = event.widget.index(selected_tab)\n        if tab_text == \"Progress Report\":\n            pass\n        else:\n            self.policyMemoEntry.delete('1.0', 'end')\n            self.policyMemoEntry.insert('1.0', self.policies[tab_index - 1])\n\n    # Creates a table of treeviews for tabs in Academic Advising\n    def createTable(self, frame, labels, tables, length):\n        # column configure\n        for i in range(2):\n            frame.columnconfigure(i, weight=1)\n\n        # define treeviews and labels\n        for i in range(length):\n            tables.append(ttk.Treeview(frame, height=7, style=\"mystyle.Treeview\", takefocus=True))\n\n            tables[i]['columns'] = (\"course#\", \"title\", \"cred\")\n            tables[i].column(\"#0\", width=0, stretch=NO)\n            tables[i].column(\"course#\", anchor=CENTER, width=75)\n            w = int((self.left_width - 300) / 2)\n            tables[i].column(\"title\", anchor=W, width=w)\n            tables[i].column(\"cred\", anchor=CENTER, width=25)\n            # tables[i].column(\"taken\", anchor=CENTER, width=30)\n\n            tables[i].heading(\"course#\", text='Course #', anchor=CENTER)\n            tables[i].heading(\"title\", text='Title', anchor=CENTER)\n            tables[i].heading(\"cred\", text='CR', anchor=CENTER)\n\n            if i < math.ceil(length/2):\n                labels.append(Label(frame, text=\"Year \" + str(i + 1), font=('Helvetica', 15)))\n\n        # grid labels\n        for i in range(math.ceil(length/2)):\n            labels[i].grid(column=0, row=2 * i, columnspan=2, sticky=W, padx=5)\n\n        # grid treeviews\n        for i in range(0, length - 1, 2):\n            tables[i].grid(column=0, row=i + 1)\n            tables[i + 1].grid(column=1, row=i + 1)\n\n    # Creates a table of treeviews for tabs in Academic Advising\n    def createMinorTable(self, frame, labels, tables):\n        # column configure\n        for i in range(2):\n            frame.columnconfigure(i, weight=1)\n\n        # define treeviews and labels\n        for i in range(len(self.minorReqList)): # Looping through the amount of minors\n            tables.append(ttk.Treeview(frame, height=7, style=\"mystyle.Treeview\", takefocus=True))\n\n            tables[i]['columns'] = (\"course#\", \"title\", \"cred\")\n            tables[i].column(\"#0\", width=0, stretch=NO)\n            tables[i].column(\"course#\", anchor=CENTER, width=75)\n            w = int((self.left_width - 300) / 2)\n            tables[i].column(\"title\", anchor=W, width=w)\n            tables[i].column(\"cred\", anchor=CENTER, width=25)\n            # tables[i].column(\"taken\", anchor=CENTER, width=30)\n\n            tables[i].heading(\"course#\", text='Course #', anchor=CENTER)\n            tables[i].heading(\"title\", text='Title', anchor=CENTER)\n            tables[i].heading(\"cred\", text='CR', anchor=CENTER)\n\n            if i < len(tables):\n                labels.append(Label(frame, font=('Helvetica', 14)))\n\n        # grid labels\n        for i in range(0,len(tables), 2):\n            labels[i].grid(column=i, row=i, columnspan=2, sticky=W, padx=20)\n            labels[i + 1].grid(column=i + 1, row=i, columnspan=2, sticky=W, padx=20)\n\n        # grid treeviews\n        for i in range(0, len(tables), 2):\n            tables[i].grid(column=0, row=i + 1)\n            tables[i + 1].grid(column=1, row=i + 1)\n\n    def planningWorksheet_layout(self):\n        self.rightFrame = Frame(self.PPWFrame)\n        self.rightFrame.pack(fill=BOTH)\n\n        for i in range(4):\n            self.rightFrame.columnconfigure(i, weight=1)\n\n        pad = 10  # pady value for most frames below\n\n        # ============================ title ============================\n        ProgPlanTitle = ttk.Label(self.rightFrame, text=\"Program Planning Worksheet\", anchor=CENTER,\n                                  font=('Helvetica', 19))\n        ProgPlanTitle.grid(row=0, column=0, columnspan=4, pady=20)\n\n        # ============================ student name ============================\n        nameFrame = Frame(self.rightFrame)\n        nameFrame.grid(row=2, column=0, columnspan=2, pady=pad)\n\n        nameLabel = Label(nameFrame, text='Name:')\n        nameLabel.pack(side=LEFT)\n\n        self.nameEntry = ttk.Entry(nameFrame)\n        self.nameEntry.pack()\n\n        # ============================ student id ============================\n        idFrame = Frame(self.rightFrame)\n        idFrame.grid(row=2, column=2, columnspan=2, pady=pad)\n\n        idLabel = Label(idFrame, text='ID Number:')\n        idLabel.pack(side=LEFT)\n\n        self.idEntry = ttk.Entry(idFrame, width=8, justify=CENTER)\n        self.idEntry.pack()\n\n        # ============================ season ============================\n        seasonFrame = Frame(self.rightFrame)\n        seasonFrame.grid(row=4, column=0, columnspan=4, pady=pad)\n\n        self.seasonVar = StringVar()\n\n        seasonLabel = Label(seasonFrame, text='Registering for:')\n        fallRadioBtn = ttk.Radiobutton(seasonFrame, text='Fall', variable=self.seasonVar, value='Fall')\n        summerRadioBtn = ttk.Radiobutton(seasonFrame, text='Summer', variable=self.seasonVar, value='Summer')\n        springRadioBtn = ttk.Radiobutton(seasonFrame, text='Spring', variable=self.seasonVar, value='Spring')\n        winterRadioBtn = ttk.Radiobutton(seasonFrame, text='Winter', variable=self.seasonVar, value='Winter')\n\n        seasonLabel.grid(row=0, column=0, padx=10)\n        fallRadioBtn.grid(row=0, column=1, padx=10)\n        winterRadioBtn.grid(row=0, column=2, padx=10)\n        springRadioBtn.grid(row=0, column=3, padx=10)\n        summerRadioBtn.grid(row=0, column=4)\n\n        # ============================ major & minor ============================\n        careerFrame = Frame(self.rightFrame)\n        careerFrame.grid(row=6, column=0, columnspan=4, pady=pad)\n\n        self.majorTree = ttk.Treeview(careerFrame, height=3, style=\"mystyle.Treeview\", selectmode='none')\n        self.majorTree.pack(side=LEFT, padx=30)\n        self.majorTree.column(\"#0\", width=150)\n        self.majorTree.heading(\"#0\", text=\"Majors\")\n\n        self.editCareerButton = ttk.Button(careerFrame, text=\"Edit\", command=self.editMajorMinor)\n        self.editCareerButton.pack(side=LEFT)\n\n        self.minorTree = ttk.Treeview(careerFrame, height=3, style=\"mystyle.Treeview\", selectmode='none')\n        self.minorTree.pack(side=RIGHT, padx=30)\n        self.minorTree.column(\"#0\", width=150)\n        self.minorTree.heading(\"#0\", text=\"Minors\")\n\n        # ============================ credits ============================\n        credFrame = Frame(self.rightFrame)\n        credFrame.grid(row=8, column=0, columnspan=4, pady=pad)\n\n        credFrameL = Frame(credFrame)\n        credFrameL.pack(side=LEFT, padx=15)\n\n        credFrameR = Frame(credFrame)\n        credFrameR.pack(side=RIGHT, padx=15)\n\n        credLabel1 = Label(credFrameL, text='Earned:')\n        self.earnCredEntry = ttk.Entry(credFrameL, width=3, justify=CENTER, state=DISABLED)\n        credLabel2 = Label(credFrameL, text='credits.')\n\n        credLabel1.grid(row=0, column=0)\n        self.earnCredEntry.grid(row=0, column=1)\n        credLabel2.grid(row=0, column=2)\n\n        credLabel3 = Label(credFrameR, text='Currently Enrolled in.')\n        self.enrollCredVar = IntVar()\n        self.enrollCredEntry = ttk.Entry(credFrameR, width=3, textvariable=self.enrollCredVar, justify=CENTER)\n        credLabel4 = Label(credFrameR, text='Credits')\n\n        credLabel4.grid(row=0, column=0)\n        self.enrollCredEntry.grid(row=0, column=1)\n        credLabel3.grid(row=0, column=2)\n\n        # ====================== Enrollment Date ========================\n        enrlDateFrame = ttk.Frame(self.rightFrame)\n        enrlDateFrame.grid(row=10, column=0, columnspan=4, pady=pad)\n\n        enrlDate = Label(enrlDateFrame, text='Enrollment Date:')\n        enrlDate.pack(side=LEFT)\n\n        self.enrlDateEntry = ttk.Entry(enrlDateFrame, width=8, justify=CENTER)\n        self.enrlDateEntry.pack()\n\n        # ============================ Course table ============================\n        courseTableFrame = Frame(self.rightFrame)\n        courseTableFrame.grid(row=12, column=0, columnspan=4, pady=pad)\n\n        self.courseTree = ttk.Treeview(courseTableFrame, height=7, style=\"mystyle.Treeview\")\n        # height is number of rows\n        self.courseTree.pack()\n\n        self.courseTree['columns'] = (\"course#\", \"title\", \"cred\", \"gen/elect\")\n\n        self.courseTree.column(\"#0\", width=0, stretch=NO)  # important\n        self.courseTree.column(\"course#\", anchor=CENTER, width=80)  # anchor for the data in the column\n        self.courseTree.column(\"title\", anchor=CENTER, width=295)\n        self.courseTree.column(\"cred\", anchor=CENTER, width=25)\n        self.courseTree.column(\"gen/elect\", anchor=CENTER, width=80)\n\n        self.courseTree.heading(\"course#\", text='Course #', anchor=CENTER)  # anchor for the title of the column\n        self.courseTree.heading(\"title\", text='Title', anchor=CENTER)\n        self.courseTree.heading(\"cred\", text='CR', anchor=CENTER)\n        self.courseTree.heading(\"gen/elect\", text='Gen ed/Elect', anchor=CENTER)\n\n        # ===================== backup course ===================\n        backupCourseFrame = Frame(self.rightFrame)\n        backupCourseFrame.grid(row=14, column=0, columnspan=4, pady=pad)\n\n        backuplabel = Label(backupCourseFrame, text=\"Back-up Courses\").pack(anchor=CENTER)\n\n        self.backupCourseTree = ttk.Treeview(backupCourseFrame, height=2, style=\"mystyle.Treeview\")\n        self.backupCourseTree.pack()\n\n        self.backupCourseTree['columns'] = (\"course#\", \"title\", \"cred\", \"gen/elect\")\n\n        self.backupCourseTree.column(\"#0\", width=0, stretch=NO)\n        self.backupCourseTree.column(\"course#\", anchor=CENTER, width=80)\n        self.backupCourseTree.column(\"title\", anchor=CENTER, width=295)\n        self.backupCourseTree.column(\"cred\", anchor=CENTER, width=25)\n        self.backupCourseTree.column(\"gen/elect\", anchor=CENTER, width=80)\n\n        self.backupCourseTree.heading(\"course#\", text='Course #', anchor=CENTER)  # anchor for the title of the column\n        self.backupCourseTree.heading(\"title\", text='Title', anchor=CENTER)\n        self.backupCourseTree.heading(\"cred\", text='CR', anchor=CENTER)\n        self.backupCourseTree.heading(\"gen/elect\", text='Gen ed/Elect', anchor=CENTER)\n\n        # ====================== memo ========================\n        memoFrame = ttk.LabelFrame(self.rightFrame, text='Memo:')\n        memoFrame.grid(row=16, column=0, columnspan=4, pady=pad)\n\n        self.memoEntry = Text(memoFrame, width=50, height=5)\n        self.memoEntry.pack()\n\n        # ===================== add remove course ==================\n        coursebuttonFrame = Frame(self.rightFrame)\n        coursebuttonFrame.grid(row=13, column=0, columnspan=4)\n\n        self.addCourseButton = ttk.Button(coursebuttonFrame, text=\"Add\", command=self.planningWorksheet_addCourseButton)\n        self.addCourseButton.pack(side=LEFT)\n\n        rmCourseButton = ttk.Button(coursebuttonFrame, text=\"Remove\", command=self.planningWorksheet_delCourseButton)\n        rmCourseButton.pack(side=RIGHT)\n\n        # backup course\n        bcoursebuttonFrame = Frame(self.rightFrame)\n        bcoursebuttonFrame.grid(row=15, column=0, columnspan=4)\n\n        self.addBackupButton = ttk.Button(bcoursebuttonFrame, text=\"Add\",\n                                          command=self.planningWorksheet_addBackupCourseButton)\n        self.addBackupButton.pack(side=LEFT)\n\n        rmBackupButton = ttk.Button(bcoursebuttonFrame, text=\"Remove\",\n                                    command=self.planningWorksheet_delBackupCourseButton)\n        rmBackupButton.pack(side=RIGHT)\n\n    # Popup window for editing student major and minor from program planning sheet\n    # called from button command\n    def editMajorMinor(self):\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Major & Minor\")\n        t.geometry(\"425x450\")\n        t.resizable(width=FALSE, height=FALSE)\n        t.transient(self.mainwin)\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\n\n        def close(e):\n            self.editCareerButton.configure(state=NORMAL)\n\n        t.bind('<Destroy>', close)\n        self.editCareerButton.configure(state=DISABLED)\n\n        # insert selected major into separate listbox\n        def majorSelection(e):\n            i = self.majorBox.curselection()\n            self.selected_major_Box.insert(END, self.majorBox.get(i))\n\n        def removeMajor():\n            i = self.selected_major_Box.curselection()\n            msg = \"Do you want to remove selected major? (\" + self.selected_major_Box.get(i) + \")\"\n            response = messagebox.askquestion(\"askquestion\", msg, parent=t)\n            if response == 'yes':\n                self.selected_major_Box.delete(i)\n\n        # insert selected minor into separate listbox\n        def minorSelection(e):\n            i = self.minorBox.curselection()\n            self.selected_minor_Box.insert(END, self.minorBox.get(i))\n\n        def removeMinor():\n            i = self.selected_minor_Box.curselection()\n            msg = \"Do you want to remove selected minor? (\" + self.selected_minor_Box.get(i) + \")\"\n            response = messagebox.askquestion(\"askquestion\", msg, parent=t)\n            if response == 'yes':\n                self.selected_minor_Box.delete(i)\n\n        def confirmSelection():\n            self.setMajor_treeview()\n            self.setMinor_treeview()\n            self.editCareerButton.configure(state=NORMAL)\n            # clear tabs from left side\n            while (self.tab_parent.index(\"end\") != 1):\n                self.tab_parent.forget(self.tab_parent.index(\"end\") - 1)\n            self.FYP_refresh()\n            t.destroy()\n\n        mainframe = Frame(t)\n        mainframe.pack(fill=X, ipadx=1, padx=10)\n\n        majorframe = ttk.LabelFrame(mainframe, text=\"Major\")\n        majorframe.pack(side=LEFT, pady=5)\n\n        minorframe = ttk.LabelFrame(mainframe, text=\"Minor\")\n        minorframe.pack(side=RIGHT, pady=5)\n\n        self.schCbox1 = ttk.Combobox(majorframe, value=self.schList, exportselection=0, width=18)\n        self.schCbox1.pack(side=TOP)\n        self.schCbox1.bind(\"<<ComboboxSelected>>\", self.getMajorBySchool)\n\n        self.schCbox2 = ttk.Combobox(minorframe, value=self.schList, exportselection=0, width=18)\n        self.schCbox2.pack(side=TOP)\n        self.schCbox2.bind(\"<<ComboboxSelected>>\", self.getMinorBySchool)\n\n        self.majorVar = StringVar()\n        self.majorBox = Listbox(majorframe, selectmode=SINGLE, justify=CENTER, listvariable=self.majorVar,\n                                exportselection=False)\n        # export selection allows us to work on other listbox while not calling this binding\n        self.majorBox.pack(side=TOP)\n        self.majorBox.bind('<Double-1>', majorSelection)  # double-click binding\n\n        self.minorVar = StringVar()\n        self.minorBox = Listbox(minorframe, selectmode=SINGLE, justify=CENTER, listvariable=self.minorVar,\n                                exportselection=False)\n        self.minorBox.pack(side=TOP)\n        self.minorBox.bind('<Double-1>', minorSelection)\n\n        label3 = Label(majorframe, text=\"Major(s) Selected:\")\n        label3.pack(side=TOP)\n        label4 = Label(minorframe, text=\"Minor(s) Selected:\")\n        label4.pack(side=TOP)\n\n        self.selected_major_Box = Listbox(majorframe, selectmode=SINGLE, justify=CENTER, exportselection=False,\n                                          height=5)\n        self.selected_major_Box.pack(side=TOP)\n\n        self.selected_minor_Box = Listbox(minorframe, selectmode=SINGLE, justify=CENTER, exportselection=False,\n                                          height=5)\n        self.selected_minor_Box.pack(side=TOP)\n\n        # for if major & minor treeview were already filled\n        for id in self.majorTree.get_children():\n            major = self.majorTree.item(id)['text']\n            self.selected_major_Box.insert(END, major)\n\n        for id in self.minorTree.get_children():\n            minor = self.minorTree.item(id)['text']\n            self.selected_minor_Box.insert(END, minor)\n\n        majorRemoveButton = ttk.Button(majorframe, text=\"Remove\", command=removeMajor)\n        majorRemoveButton.pack(side=TOP)\n        minorRemoveButton = ttk.Button(minorframe, text=\"Remove\", command=removeMinor)\n        minorRemoveButton.pack(side=TOP)\n\n        comfirmButton = ttk.Button(t, text=\"Confirm\", command=confirmSelection)\n        comfirmButton.pack(side=BOTTOM, pady=10)\n\n    # end goal: return array of major under specified school\n    def getMajorBySchool(self, e):\n        pub.sendMessage(\"request_major\", sch=self.schCbox1.get())\n\n    def getMinorBySchool(self, e):\n        pub.sendMessage(\"request_minor\", sch=self.schCbox2.get())\n\n    # fill major treeview from program planning worksheet\n    def setMajor_treeview(self):\n        for id in self.majorTree.get_children():  # clear tree view\n            self.majorTree.delete(id)\n\n        self.selected_major_Box.select_set(0, END)\n        for i in self.selected_major_Box.curselection():\n            word = self.selected_major_Box.get(i)\n            self.majorTree.insert(parent='', index='end', iid=i, text=str(word))\n\n    def FYP_refresh(self):\n        majors, minors = [], []\n        for id in self.majorTree.get_children():\n            majors.append(self.majorTree.item(id)['text'])\n        for id in self.minorTree.get_children():\n            minors.append(self.minorTree.item(id)['text'])\n        pub.sendMessage(\"refresh_fyp\", majors=majors, minors=minors)\n\n    def setMinor_treeview(self):\n        for id in self.minorTree.get_children():\n            self.minorTree.delete(id)\n\n        self.selected_minor_Box.select_set(0, END)\n        for i in self.selected_minor_Box.curselection():\n            word = self.selected_minor_Box.get(i)\n            self.minorTree.insert(parent='', index='end', iid=i, text=str(word))\n\n    def planningWorksheet_addCourseButton(self):\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Search for Course\")\n        t.geometry(\"450x125\")\n        t.resizable(width=FALSE, height=FALSE)\n        t.transient(self.mainwin)\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\n\n        def close(e):\n            self.addCourseButton.configure(state=NORMAL)\n            t.destroy()\n\n        t.bind('<Destroy>', close)\n        self.addCourseButton.configure(state=DISABLED)\n\n        def courseSearch(e):\n            course = entry.get()\n            if len(course) > 7:\n                if len(course.split()[1]) == 3:\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\n                    self.resultVar.set(\n                        self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\n                        self.addCourseSearchResult[2] + \" \" * 3 +\n                        self.addCourseSearchResult[3])\n                else:\n                    self.resultVar.set(\"\")\n            else:\n                self.resultVar.set(\"\")\n\n        # adds searched course into the treeview\n        def addCourse():\n            self.courseTree.insert(parent='', index='end', iid=self.courseTree_counter, text=\"\",\n                                   values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\n                                           self.addCourseSearchResult[2],\n                                           int(float(self.addCourseSearchResult[3])),\n                                           genEntry.get()))\n            self.courseTree_counter += 1\n            genEntry.delete(0, END)\n\n            prevcred = self.enrollCredVar.get()\n            self.enrollCredVar.set(prevcred + int(float(self.addCourseSearchResult[3])))\n\n        courseEntryFrame = Frame(t)\n        courseEntryFrame.pack(anchor=CENTER)\n\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\n        entry.pack(side=LEFT)\n\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\n\n        resultFrame = Frame(t)\n        resultFrame.pack(anchor=CENTER)\n\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\n        resultEntry.pack(side=TOP)\n\n        genedFrame = Frame(t)\n        genedFrame.pack(anchor=CENTER)\n\n        l2 = Label(genedFrame, text=\"gen ed/elect:\").pack(side=LEFT, anchor=NW)\n\n        genEntry = ttk.Entry(genedFrame)\n        genEntry.pack(side=TOP)\n\n        addButton = Button(genedFrame, text=\"Add\", command=addCourse)\n        addButton.pack(side=TOP)\n\n    def planningWorksheet_delCourseButton(self):\n        for course in self.courseTree.selection():\n            msg = \"Do you want to remove the selected course? (\" + self.courseTree.item(course)['values'][0] + \")\"\n            response = messagebox.askquestion(\"askquestion\", msg)\n            if response == 'yes':\n                prevcred = self.enrollCredVar.get()\n                self.enrollCredVar.set(prevcred - int(float(self.courseTree.item(course)['values'][2])))\n\n                self.courseTree.delete(course)\n                self.courseTree_counter -= 1\n\n    def planningWorksheet_addBackupCourseButton(self):\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Search for Backup Course\")\n        t.geometry(\"450x125\")\n        t.resizable(width=FALSE, height=FALSE)\n        t.transient(self.mainwin)\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\n\n        def close(e):\n            self.addBackupButton.configure(state=NORMAL)\n            t.destroy()\n\n        t.bind('<Destroy>', close)\n        self.addBackupButton.configure(state=DISABLED)\n\n        def courseSearch(e):\n            course = entry.get()\n            if len(course) > 7:\n                if len(course.split()[1]) == 3:\n                    pub.sendMessage(\"request_course#\", sub=course.split()[0], cat=course.split()[1])\n                    self.resultVar.set(self.addCourseSearchResult[0] + \" \" + self.addCourseSearchResult[1] + \" \" * 3 +\n                                       self.addCourseSearchResult[2] + \" \" * 3 +\n                                       self.addCourseSearchResult[3])\n                else:\n                    self.resultVar.set(\"\")\n            else:\n                self.resultVar.set(\"\")\n\n        def addCourse():\n            self.backupCourseTree.insert(parent='', index='end', iid=self.backupCourseTree_counter, text=\"\",\n                                         values=(self.addCourseSearchResult[0] + self.addCourseSearchResult[1],\n                                                 self.addCourseSearchResult[2],\n                                                 int(float(self.addCourseSearchResult[3])),\n                                                 genEntry.get()))\n            self.backupCourseTree_counter += 1\n            genEntry.delete(0, END)\n\n            prevcred = self.enrollCredVar.get()\n            self.enrollCredVar.set(prevcred + int(float(self.addCourseSearchResult[3])))\n\n        courseEntryFrame = Frame(t)\n        courseEntryFrame.pack(anchor=CENTER)\n\n        l1 = Label(courseEntryFrame, text=\"Course Number:\").pack(side=LEFT)\n        entry = ttk.Entry(courseEntryFrame, width=10, justify=CENTER)\n        entry.pack(side=LEFT)\n\n        entry.bind('<KeyRelease>', courseSearch)  # for auto search\n\n        resultFrame = Frame(t)\n        resultFrame.pack(anchor=CENTER)\n\n        resultEntry = ttk.Entry(resultFrame, textvariable=self.resultVar, state=DISABLED, justify=CENTER, width=50)\n        resultEntry.pack(side=TOP)\n\n        genedFrame = Frame(t)\n        genedFrame.pack(anchor=CENTER)\n\n        l2 = Label(genedFrame, text=\"gen ed/elect:\").pack(side=LEFT, anchor=NW)\n\n        genEntry = ttk.Entry(genedFrame)\n        genEntry.pack(side=TOP)\n\n        addButton = Button(genedFrame, text=\"Add\", command=addCourse)\n        addButton.pack(side=TOP)\n\n    def planningWorksheet_delBackupCourseButton(self):\n        for course in self.backupCourseTree.selection():\n            msg = \"Do you want to remove the selected backup course? (\" + self.backupCourseTree.item(course)['values'][\n                0] + \")\"\n            response = messagebox.askquestion(\"askquestion\", msg)\n            if response == 'yes':\n                self.backupCourseTree.delete(course)\n                self.backupCourseTree_counter -= 1\n\n    # clears every widget\n    def planningWorksheet_reset(self):\n        self.courseHist.clear()\n        self.nameEntry.delete(0, END)\n        self.idEntry.delete(0, END)\n\n        for id in self.majorTree.get_children():\n            self.majorTree.delete(id)\n\n        for id in self.minorTree.get_children():\n            self.minorTree.delete(id)\n\n        self.seasonVar.set(\"\")\n\n        self.enrollCredVar.set(0)\n\n        self.earnCredEntry['state'] = NORMAL\n        self.earnCredEntry.delete(0, END)\n        self.earnCredEntry['state'] = 'readonly'\n\n        self.enrlDateEntry.delete(0, END)\n        self.memoEntry.delete('1.0', 'end')\n\n        for course in self.courseTree.get_children():\n            self.courseTree.delete(course)\n        self.courseTree_counter = 0\n\n        for course in self.backupCourseTree.get_children():\n            self.backupCourseTree.delete(course)\n        self.backupCourseTree_counter = 0\n\n    def planningWorksheet_fill(self, obj, tcred, courses, numbCourse, major, minor, bcourses,\n                               courseHist, fourYear, minorFourYear, minorReqList, policies):\n        # obj is a py dict\n\n        # clear data in widgets\n        self.planningWorksheet_reset()\n\n        self.courseHist = courseHist\n        self.nameEntry.insert(END, obj['name'])\n        self.idEntry.insert(END, obj['s_id'])\n        self.seasonVar.set(obj['registering_for'])\n\n        index = 0\n        for m in major:\n            self.majorTree.insert(parent='', index='end', iid=index, text=m)\n            index = index + 1\n        index = 0\n        for m in minor:\n            self.minorTree.insert(parent='', index='end', iid=index, text=m)\n            index = index + 1\n\n        self.earnCredEntry['state'] = NORMAL\n        self.earnCredEntry.insert(END, obj['credits'])\n        self.earnCredEntry['state'] = 'readonly'\n\n        self.enrollCredVar.set(tcred)\n\n        self.enrlDateEntry.insert(END, obj['enrll'])\n        self.memoEntry.insert('1.0', obj['memo'])\n\n        for c in courses:\n            self.courseTree.insert(parent='', index='end', iid=self.courseTree_counter, text=\"\",\n                                   values=(c[0], c[1], c[2], c[3]))\n            self.courseTree_counter += 1\n\n        for c in bcourses:\n            self.backupCourseTree.insert(parent='', index='end', iid=self.backupCourseTree_counter, text=\"\",\n                                         values=(c[0], c[1], c[2], c[3]))\n            self.backupCourseTree_counter += 1\n\n        self.courseTakenList_fill()\n\n    def courseTakenList_layout(self):\n        label = Label(self.courseTakenListFrame, text=\"Course Taken List\", font=('Helvetica', 19))\n        label.pack(anchor=CENTER, side=TOP, pady=20)\n\n        self.courseTakenListTree = ttk.Treeview(self.courseTakenListFrame, show=\"tree\", height=38,\n                                                style=\"mystyle.Treeview\")\n        self.courseTakenListTree['columns'] = (\"grade\")\n        self.courseTakenListTree.column(\"#0\")\n        self.courseTakenListTree.column(\"grade\")\n\n        for subj in self.subjectsList:\n            self.courseTakenListTree.insert(parent='', index='end', iid=self.courseTakenList_counter, text=str(subj))\n            self.courseTakenList_counter += 1\n\n    def courseTakenList_reset(self):\n        self.courseTakenListTree.pack_forget()\n        for subj in self.courseTakenListTree.get_children():\n            self.courseTakenListTree.delete(subj)\n        self.courseTakenList_counter = 0\n\n        for subj in self.subjectsList:\n            self.courseTakenListTree.insert(parent='', index='end', iid=self.courseTakenList_counter, text=str(subj))\n            self.courseTakenList_counter += 1\n\n    def courseTakenList_fill(self):\n        self.courseTakenList_reset()\n        self.courseTakenListTree.pack(side=TOP, padx=50, pady=10, fill=X)\n\n        for sem in self.courseHist:\n            for course in sem:\n                for id in self.courseTakenListTree.get_children():\n                    if course[1] == self.courseTakenListTree.item(id)['text']:  # comparing subjects\n                        name = str(course[1] + \" \" + course[2] + \" \" * 5 + course[3])\n                        self.courseTakenListTree.insert(parent=str(id), index='end', iid=self.courseTakenList_counter,\n                                                        text=name, values=(course[5]))\n                        self.courseTakenList_counter += 1\n\n        for id in self.courseTakenListTree.get_children():\n            if not self.courseTakenListTree.get_children(id):\n                self.courseTakenListTree.delete(id)\n\n    def menuBar(self):\n        menu = Menu(self.mainwin, tearoff=0)\n        self.mainwin.config(menu=menu)\n\n        self.schedule = Menu(menu, tearoff=0)\n        menu.add_cascade(label='Schedule', menu=self.schedule)\n        self.scheduleMenu()\n\n        load = Menu(menu, tearoff=0)\n        menu.add_cascade(label='View', menu=load)\n        self.loadMenu(load)\n\n        # DataBase\n        DB = Menu(menu, tearoff=0)\n        menu.add_cascade(label='Update DB', menu=DB)\n        self.DataBaseMenu(DB)\n\n    # schedule menu dropdown\n    def scheduleMenu(self):\n        self.schedule.add_command(label='New', command=self.newSchedule)\n        self.schedule.add_command(label='Open...', command=self.openSchedule)\n        self.schedule.add_separator()\n        self.schedule.add_command(label='Save', command=self.saveSchedule)\n        self.schedule.add_separator()\n        self.schedule.add_command(label='Export', command=self.exportSchedule)\n        self.schedule.add_command(label='Print', command=self.printSchedule)\n        self.schedule.add_separator()\n        self.schedule.add_command(label=\"Help\", command=self.printHelp)\n\n\n    def printHelp(self):\n\n        # Create pop up window on top level of application\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Help Menu\")\n        t.geometry(\"1000x600\")\n        t.attributes('-topmost', 'true')\n\n        top = Frame(t)      # Top frame for title and buttons\n        bottom = Frame(t)   # Bottom frame for list box containing help menu\n        top.pack(side=TOP)\n        bottom.pack(side=BOTTOM, fill=BOTH, expand=True)\n\n        # Create scroll bar\n        scrollbar = Scrollbar(bottom)\n        scrollbar.pack(side=RIGHT, fill=Y)\n\n        # Create list box in bottom frame for help menu\n        helpmenu = Listbox(bottom, yscrollcommand=scrollbar.set)\n        helpmenu.pack(side=LEFT, fill=BOTH, expand=YES)\n\n        # Displays the menu options\n        def menu_option():\n            helpmenu.delete(0, 'end')\n            file = open('Help/help.txt')\n            for i in file:\n                helpmenu.insert(END, str(i))\n\n        # Displays the four year plan options\n        def four_option():\n            helpmenu.delete(0, 'end')\n            file = open('Help/help2.txt')\n            for i in file:\n                helpmenu.insert(END, str(i))\n\n        # Displays the program planning options\n        def program_option():\n            helpmenu.delete(0, 'end')\n            file = open('Help/help3.txt')\n            for i in file:\n                helpmenu.insert(END, str(i))\n\n        menu_option()   # Starts on first page of help menu\n        head = Label(top, text=\"Help Menu\", font=125)   # Title\n        head.pack()\n        button1 = Button(top, text=\"Menu Options\", width=15, height=1, command=menu_option)     # Button for menu options\n        button1.pack(in_=top, side=LEFT)\n        button2 = Button(top, text=\"Four Year Plan\", width=15, height=1, command=four_option)   # Button for four year options\n        button2.pack(in_=top, side=LEFT)\n        button3 = Button(top, text=\"Program Planning\", width=15, height=1, command=program_option)  # Button for program planning options\n        button3.pack(in_=top, side=LEFT)\n\n        scrollbar.config(command=helpmenu.yview)    # Set scroll bar to effect Y axis view of list box\n\n\n\n    def newSchedule(self):\n        self.planningWorksheet_reset()\n        self.FYP_reset()\n        self.courseTakenList_reset()\n        # Removes buttons when student information is not present\n        self.addProgRepoBtn.grid_forget()\n        self.removeProgRepoBtn.grid_forget()\n\n    def openSchedule(self):\n        t = Toplevel(self.mainwin)\n        t.wm_title(\"Search for Student\")\n        t.geometry(\"450x125\")\n        t.resizable(width=0, height=0)\n        t.attributes('-topmost', 'true')\n        self.mainwin.eval(f'tk::PlaceWindow {str(t)} center')\n\n        def close(e):\n            self.schedule.entryconfigure(1, state=NORMAL)\n            t.destroy()\n\n        t.bind('<Destroy>', close)\n        self.schedule.entryconfigure(1, state=DISABLED)\n\n        def openScheduleSearchButton():\n            name = fnameE.get() + \" \" + lnameE.get()\n            id = idE.get()\n            if name != \"\" and id != \"\":\n                pub.sendMessage(\"request_PPW\", name=name, id=int(id))\n                self.schedule.entryconfigure(1, state=NORMAL)\n                t.destroy()\n                # Shows buttons for Progress Report when student information is present\n                self.addProgRepoBtn.grid(column=0, row=0, sticky=E, padx=120)\n                self.removeProgRepoBtn.grid(column=0, row=0, sticky=E, padx=25)\n\n        nameFrame = Frame(t)\n        nameFrame.pack(side=TOP, anchor='w', padx=20, pady=10)\n\n        idFrame = Frame(t)\n        idFrame.pack(side=TOP, anchor='w', padx=20)\n\n        butFrame = Frame(t)\n        butFrame.pack(side=BOTTOM, anchor=CENTER, pady=10)\n\n        label2 = Label(nameFrame, text='First name:').pack(side=LEFT)\n        fnameE = ttk.Entry(nameFrame, width=10)\n        fnameE.pack(side=LEFT)\n\n        lnameE = ttk.Entry(nameFrame, width=15)\n        lnameE.pack(side=RIGHT)\n        label3 = Label(nameFrame, text='Last name:').pack(side=RIGHT)\n\n        label3 = Label(idFrame, text='Student Id:').pack(side=LEFT)\n        idE = ttk.Entry(idFrame, width=10)\n        idE.pack(side=LEFT)\n\n        searchB = Button(butFrame, text='Search', command=openScheduleSearchButton)\n        searchB.pack()\n\n    def saveSchedule(self):\n        majors, minors = [], []\n        for id in self.majorTree.get_children():\n            majors.append(self.majorTree.item(id)['text'])\n        for id in self.minorTree.get_children():\n            minors.append(self.minorTree.item(id)['text'])\n\n        courses, bcourses = [], []\n        for id in self.courseTree.get_children():\n            courses.append(self.courseTree.item(id)['values'])\n        for id in self.backupCourseTree.get_children():\n            bcourses.append(self.backupCourseTree.item(id)['values'])\n\n        pydict = {\n            \"name\": self.nameEntry.get(),\n            \"s_id\": self.idEntry.get(),\n            # \"dept\": ,\n            \"major\": majors,\n            \"minor\": minors,\n            \"taking_course\": courses,\n            \"backup_course\": bcourses\n        }\n        pub.sendMessage(\"save_schedule\", obj=pydict)\n\n    def exportSchedule(self):\n        print(\"Export schedule\")\n\n    def printSchedule(self):\n        print(\"Print schedule\")\n\n    def loadMenu(self, major):\n        major.add_command(label='Four Year Plan', command=self.showFourYearPlan)\n        major.add_command(label='Course Taken List', command=self.showCourseTakenList)\n\n    def showFourYearPlan(self):\n        self.courseTakenListFrame.pack_forget()\n        self.PPWFrame.pack_forget()\n        self.leftFrame.pack(side=LEFT, fill=Y, padx=5)\n        self.PPWFrame.pack(side=RIGHT, fill=Y)\n        self.PPWFrame.pack_propagate(0)\n\n    def showCourseTakenList(self):\n        self.leftFrame.pack_forget()\n        self.courseTakenListFrame.pack(side=LEFT, fill=Y, padx=5)\n        self.courseTakenListFrame['width'] = self.left_width\n        self.courseTakenListFrame.propagate(0)\n\n    def openCSV(self):\n        pub.sendMessage(\"request_CSV\")\n\n    # data base menu dropdown\n    def DataBaseMenu(self, DB):\n        DB.add_command(label='Current Semester Course', command=self.openCSV)\n        DB.add_separator()\n        DB.add_command(label='Add/Remove a School')\n        DB.add_command(label='Add/remove a Major')\n        DB.add_command(label='Add/Remove a minor')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/View.py b/View.py
--- a/View.py	(revision e90a0c322ed6d6027fc045791a4da3820166ed39)
+++ b/View.py	(date 1620073822115)
@@ -198,7 +198,7 @@
                 self.progTableTree_iid += 1
             semIndex += 1
 
-        for i in range(len(major)): # Filling arrays according to amount of majors a student is doing
+        for i in range(len(major)):  # Filling arrays according to amount of majors a student is doing
             self.majorsLabelArray.append([]) # Creates 2d array for each each array containing labels for a tab
             self.majorsTable.append([])  # Creates 2d array each array is a major containing each treeview for a tab
             self.majorFrames.append(Frame(self.tab_parent)) # Holds frames for each tab
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"c3afb585-7f39-4a8c-a877-221e8ed35f28\" name=\"Default Changelist\" comment=\"Fixed labels for extra treeviews and clearing treeviews\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/View.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/View.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1oMl1pYJEeOWR5zT3h9IUIku2Zh\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"recentsLimit\" value=\"1\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.keymap\" />\n  </component>\n  <component name=\"PyConsoleOptionsProvider\">\n    <option name=\"myPythonConsoleState\">\n      <console-settings module-name=\"cosc425AAT\" is-module-sdk=\"true\">\n        <option name=\"myUseModuleSdk\" value=\"true\" />\n        <option name=\"myModuleName\" value=\"cosc425AAT\" />\n      </console-settings>\n    </option>\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n      <recent name=\"$PROJECT_DIR$/Florent/gui tests\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/Florent/Devin\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Controller\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"cosc425AAT\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Controller.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.Controller\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"c3afb585-7f39-4a8c-a877-221e8ed35f28\" name=\"Default Changelist\" comment=\"\" />\n      <created>1613104128996</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1613104128996</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"removed bg colors\">\n      <created>1613405387072</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613405387072</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"reworked layout, menu for 'open recent'. TODO: MVC and file browser\">\n      <created>1613428018531</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613428018531</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"...\">\n      <created>1613882825650</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1613882825650</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"fixed course entry table and revised code\">\n      <created>1614370949770</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614370949770</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"revised code\">\n      <created>1614371298603</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614371298603</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"memo box\">\n      <created>1614441228793</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614441228793</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"changed bd functions and backup course table\">\n      <created>1614633906576</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614633906576</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"used grid to do layout, radiobutton work and new schedule clear entries\">\n      <created>1614978323011</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1614978323011</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"fixed window size\">\n      <created>1615225111763</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615225111763</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"optimal spacing between widgets in rightFrame\">\n      <created>1615225374129</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615225374129</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"open schedule popup window\">\n      <created>1615242799581</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615242799581</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"open json from database\">\n      <created>1615243532562</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615243532562</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"implemented Treeview to replace entries tables\">\n      <created>1615419276149</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615419276149</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"fixed Treeview sizing issue\">\n      <created>1615419986911</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615419986911</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"cleanned up code\">\n      <created>1615420992949</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615420992949</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"{schedule -&gt; open} revised\">\n      <created>1615423673359</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615423673359</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"implemented add/remove buttons for course table\">\n      <created>1615958438819</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1615958438819</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"changed table columns name\">\n      <created>1616014769159</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616014769159</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"implemented auto search for add button\">\n      <created>1616021239883</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616021239883</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"implemented auto search for add button for backup courses\">\n      <created>1616165818974</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616165818974</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"can hide/show 4 year plan frame and course taken list frame\">\n      <created>1616168724605</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616168724605</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"started working on course taken list ideal format\">\n      <created>1616185431592</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616185431592</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"minor setup\">\n      <created>1616253030819</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616253030820</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"course taken list implemented, need to filter out subjects not used\">\n      <created>1616279871036</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616279871036</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"course taken list finalized\">\n      <created>1616297158162</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616297158162</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"renamed/moved functions, renamed some variables, fix enrollCred traceback call error\">\n      <created>1616428624225</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616428624225</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"course taken list hidden when no information is provided\">\n      <created>1616448124850</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616448124850</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"rezized layout and positioned combobox for careerFrame.\">\n      <created>1616739114328</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616739114328</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"department, major and minor combobox functional\">\n      <created>1616788919657</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616788919657</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"reworking on course taken list due to db changes\">\n      <created>1616880762938</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616880762938</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"fixed course taken list and save menu button now bundles data to be sent to model class\">\n      <created>1616884691789</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1616884691789</updated>\n    </task>\n    <task id=\"LOCAL-00032\" summary=\"changed department label to school, added grade column to course taken list\">\n      <created>1617052596841</created>\n      <option name=\"number\" value=\"00032\" />\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1617052596841</updated>\n    </task>\n    <task id=\"LOCAL-00033\" summary=\"reworked coursetaken list and removed 'save as' &amp; 'open recent' file menubar option\">\n      <created>1617070990309</created>\n      <option name=\"number\" value=\"00033\" />\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1617070990309</updated>\n    </task>\n    <task id=\"LOCAL-00034\" summary=\"update\">\n      <created>1617391691817</created>\n      <option name=\"number\" value=\"00034\" />\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1617391691818</updated>\n    </task>\n    <task id=\"LOCAL-00035\" summary=\"major and minor feature now works as intended\">\n      <created>1617828497477</created>\n      <option name=\"number\" value=\"00035\" />\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1617828497477</updated>\n    </task>\n    <task id=\"LOCAL-00036\" summary=\"Added warnings to remove/delete buttons, and also cleaned up code a bit and included small comments\">\n      <created>1618201377774</created>\n      <option name=\"number\" value=\"00036\" />\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618201377774</updated>\n    </task>\n    <task id=\"LOCAL-00037\" summary=\"uncentered majorTree and minorTree from Programing Worksheet\">\n      <created>1618201677106</created>\n      <option name=\"number\" value=\"00037\" />\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618201677107</updated>\n    </task>\n    <task id=\"LOCAL-00038\" summary=\"labeled sides in major minor popup window, changed major minor listbox binding to double-click, seasonVar reset when ppw reset\">\n      <created>1618377199237</created>\n      <option name=\"number\" value=\"00038\" />\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618377199237</updated>\n    </task>\n    <task id=\"LOCAL-00039\" summary=\"Removed dash line from menu bar, lower tables fonts size, changed Credit Hour abbr to CR\">\n      <created>1618433966614</created>\n      <option name=\"number\" value=\"00039\" />\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618433966614</updated>\n    </task>\n    <task id=\"LOCAL-00040\" summary=\"Fixed policy not changing and triple major not resetting\">\n      <created>1618786541461</created>\n      <option name=\"number\" value=\"00040\" />\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618786541461</updated>\n    </task>\n    <task id=\"LOCAL-00041\" summary=\"Fixed policy not changing and triple major not resetting\">\n      <created>1618788331597</created>\n      <option name=\"number\" value=\"00041\" />\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1618788331598</updated>\n    </task>\n    <task id=\"LOCAL-00042\" summary=\"Clean\">\n      <created>1619133855597</created>\n      <option name=\"number\" value=\"00042\" />\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619133855597</updated>\n    </task>\n    <task id=\"LOCAL-00043\" summary=\"Clean\">\n      <created>1619136298298</created>\n      <option name=\"number\" value=\"00043\" />\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619136298298</updated>\n    </task>\n    <task id=\"LOCAL-00044\" summary=\"Partial Minor tab implmentation\">\n      <created>1619387431990</created>\n      <option name=\"number\" value=\"00044\" />\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619387431990</updated>\n    </task>\n    <task id=\"LOCAL-00045\" summary=\"Resets the minors tabs\">\n      <created>1619387581865</created>\n      <option name=\"number\" value=\"00045\" />\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619387581865</updated>\n    </task>\n    <task id=\"LOCAL-00046\" summary=\"Minor tabs being filled properly\">\n      <created>1619390422769</created>\n      <option name=\"number\" value=\"00046\" />\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619390422770</updated>\n    </task>\n    <task id=\"LOCAL-00047\" summary=\"Clean\">\n      <created>1619904789998</created>\n      <option name=\"number\" value=\"00047\" />\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619904789998</updated>\n    </task>\n    <task id=\"LOCAL-00048\" summary=\"Fixed labels for minor tabs\">\n      <created>1619912202069</created>\n      <option name=\"number\" value=\"00048\" />\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619912202069</updated>\n    </task>\n    <task id=\"LOCAL-00049\" summary=\"Progress report now handles a dynamic amount of semesters\">\n      <created>1619986030563</created>\n      <option name=\"number\" value=\"00049\" />\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619986030563</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"50\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.History.Properties\">\n    <option name=\"COLUMN_ID_ORDER\">\n      <list>\n        <option value=\"Default.Root\" />\n        <option value=\"Default.Author\" />\n        <option value=\"Default.Date\" />\n        <option value=\"Default.Subject\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"minor setup\" />\n    <MESSAGE value=\"course taken list implemented, need to filter out subjects not used\" />\n    <MESSAGE value=\"course taken list finalized\" />\n    <MESSAGE value=\"renamed/moved functions, renamed some variables, fix enrollCred traceback call error\" />\n    <MESSAGE value=\"course taken list hidden when no information is provided\" />\n    <MESSAGE value=\"rezized layout and positioned combobox for careerFrame.\" />\n    <MESSAGE value=\"department, major and minor combobox functional\" />\n    <MESSAGE value=\"reworking on course taken list due to db changes\" />\n    <MESSAGE value=\"fixed course taken list and save menu button now bundles data to be sent to model class\" />\n    <MESSAGE value=\"changed department label to school, added grade column to course taken list\" />\n    <MESSAGE value=\"reworked coursetaken list and removed 'save as' &amp; 'open recent' file menubar option\" />\n    <MESSAGE value=\"update\" />\n    <MESSAGE value=\"major and minor feature now works as intended\" />\n    <MESSAGE value=\"Added warnings to remove/delete buttons, and also cleaned up code a bit and included small comments\" />\n    <MESSAGE value=\"uncentered majorTree and minorTree from Programing Worksheet\" />\n    <MESSAGE value=\"labeled sides in major minor popup window, changed major minor listbox binding to double-click, seasonVar reset when ppw reset\" />\n    <MESSAGE value=\"Removed dash line from menu bar, lower tables fonts size, changed Credit Hour abbr to CR\" />\n    <MESSAGE value=\"centered right side of application, and set default font to helvetica 14\" />\n    <MESSAGE value=\"Fixed policy not changing and triple major not resetting\" />\n    <MESSAGE value=\"Partial Minor tab implmentation\" />\n    <MESSAGE value=\"Resets the minors tabs\" />\n    <MESSAGE value=\"Minor tabs being filled properly\" />\n    <MESSAGE value=\"Clean\" />\n    <MESSAGE value=\"Fixed labels for minor tabs\" />\n    <MESSAGE value=\"Progress report now handles a dynamic amount of semesters\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Progress report now handles a dynamic amount of semesters\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e90a0c322ed6d6027fc045791a4da3820166ed39)
+++ b/.idea/workspace.xml	(date 1620073823675)
@@ -97,13 +97,6 @@
       <option name="presentableId" value="Default" />
       <updated>1613104128996</updated>
     </task>
-    <task id="LOCAL-00001" summary="removed bg colors">
-      <created>1613405387072</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1613405387072</updated>
-    </task>
     <task id="LOCAL-00002" summary="reworked layout, menu for 'open recent'. TODO: MVC and file browser">
       <created>1613428018531</created>
       <option name="number" value="00002" />
@@ -440,7 +433,14 @@
       <option name="project" value="LOCAL" />
       <updated>1619986030563</updated>
     </task>
-    <option name="localTasksCounter" value="50" />
+    <task id="LOCAL-00050" summary="Fixed labels for extra treeviews and clearing treeviews">
+      <created>1619993881098</created>
+      <option name="number" value="00050" />
+      <option name="presentableId" value="LOCAL-00050" />
+      <option name="project" value="LOCAL" />
+      <updated>1619993881099</updated>
+    </task>
+    <option name="localTasksCounter" value="51" />
     <servers />
   </component>
   <component name="Vcs.Log.History.Properties">
@@ -478,7 +478,6 @@
     <option name="oldMeFiltersMigrated" value="true" />
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="minor setup" />
     <MESSAGE value="course taken list implemented, need to filter out subjects not used" />
     <MESSAGE value="course taken list finalized" />
     <MESSAGE value="renamed/moved functions, renamed some variables, fix enrollCred traceback call error" />
@@ -503,6 +502,7 @@
     <MESSAGE value="Clean" />
     <MESSAGE value="Fixed labels for minor tabs" />
     <MESSAGE value="Progress report now handles a dynamic amount of semesters" />
-    <option name="LAST_COMMIT_MESSAGE" value="Progress report now handles a dynamic amount of semesters" />
+    <MESSAGE value="Fixed labels for extra treeviews and clearing treeviews" />
+    <option name="LAST_COMMIT_MESSAGE" value="Fixed labels for extra treeviews and clearing treeviews" />
   </component>
 </project>
\ No newline at end of file
